// Copyright (c) 2018-2022 The MobileCoin Foundation

mod autogenerated_code {
    // Expose proto data types from included third-party/external proto files.
    pub use mc_api::{blockchain, external};
    // Include sthe auto-generated code.
    pub mod fog_report {
        include!(concat!(env!("OUT_DIR"), "/protos-auto-gen/report.rs"));
    }
}

use crate::fog_report::report::AttestationEvidence as ProtoAttestationEvidence;
pub use autogenerated_code::*;
use mc_attest_verifier_types::{prost, VerificationReport};
use mc_fog_report_types::AttestationEvidence;

// These are needed for tests
impl Eq for fog_report::Report {}
impl Eq for fog_report::ReportResponse {}

impl From<ProtoAttestationEvidence> for AttestationEvidence {
    fn from(value: ProtoAttestationEvidence) -> Self {
        match value {
            ProtoAttestationEvidence::DcapEvidence(evidence) => {
                prost::DcapEvidence::from(&evidence).into()
            }
            ProtoAttestationEvidence::VerificationReport(report) => {
                VerificationReport::from(&report).into()
            }
        }
    }
}

impl From<&AttestationEvidence> for ProtoAttestationEvidence {
    fn from(value: &AttestationEvidence) -> Self {
        match value {
            AttestationEvidence::DcapEvidence(evidence) => {
                ProtoAttestationEvidence::DcapEvidence(evidence.into())
            }
            AttestationEvidence::VerificationReport(report) => {
                ProtoAttestationEvidence::VerificationReport(report.into())
            }
        }
    }
}

impl From<fog_report::Report> for mc_fog_report_types::Report {
    fn from(src: fog_report::Report) -> mc_fog_report_types::Report {
        mc_fog_report_types::Report {
            fog_report_id: src.fog_report_id,
            attestation_evidence: src.attestation_evidence.map(|x| x.into()),
            pubkey_expiry: src.pubkey_expiry,
        }
    }
}

impl From<mc_fog_report_types::Report> for fog_report::Report {
    fn from(src: mc_fog_report_types::Report) -> fog_report::Report {
        Self {
            fog_report_id: src.fog_report_id,
            attestation_evidence: src.attestation_evidence.as_ref().map(|x| x.into()),
            pubkey_expiry: src.pubkey_expiry,
        }
    }
}

impl From<fog_report::ReportResponse> for mc_fog_report_types::ReportResponse {
    fn from(src: fog_report::ReportResponse) -> Self {
        Self {
            // Note: this is out of order because get_chain is a borrow, but the
            //       iter below is a partial move.
            chain: src.chain,
            reports: src.reports.into_iter().map(|x| x.into()).collect(),
            signature: src.signature,
        }
    }
}

impl From<mc_fog_report_types::ReportResponse> for fog_report::ReportResponse {
    fn from(src: mc_fog_report_types::ReportResponse) -> Self {
        Self {
            reports: src.reports.into_iter().map(|x| x.into()).collect(),
            chain: src.chain,
            signature: src.signature,
        }
    }
}
