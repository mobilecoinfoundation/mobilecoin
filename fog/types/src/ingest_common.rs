// Copyright (c) 2018-2022 The MobileCoin Foundation

//! Contains "native" rust structs that correspond to structs generated by
//! protobuf.
use alloc::{string::String, vec::Vec};
use mc_crypto_keys::CompressedRistrettoPublic;
use serde::{Deserialize, Serialize};

/// Mirrors the proto definition of IngestSummary. We have to define this
/// "native" Rust type to be able to add traits like Serialize to this data.
///
/// TODO: Once protobuf v3 becomes stable, use its JSON conversion feature
/// where this struct is needed, and delete this struct.
#[derive(Deserialize, Serialize)]
pub struct IngestSummary {
    /// The current mode of the server
    pub ingest_controller_mode: IngestControllerMode,
    /// The next block index that will scanned
    pub next_block_index: u64,
    /// The pubkey expiry window value, used to compute pubkey_expiry values in
    /// reports. This is how many more blocks we commit to scanning with
    /// this key. (If we don't scan that many blocks, then the ones we
    /// didn't scan are "missed blocks".)
    pub pubkey_expiry_window: u64,
    /// The ingress public key of the server
    pub ingress_pubkey: CompressedRistrettoPublic,
    /// The egress public key of the server (appearing in RngRecord objects)
    pub egress_pubkey: Vec<u8>,
    /// The kex rng version of the server (appearing in RngRecord objects)
    pub kex_rng_version: u32,
    /// The list of peers of this server. The list contains igp:// URIs
    pub peers: Vec<String>,
    /// The current ingest invocation id of this server (only if Active)
    pub ingest_invocation_id: i64,
}

/// Represents the possible modes of an ingest server controller
#[derive(Deserialize, Serialize)]
pub enum IngestControllerMode {
    /// Server is not actively consuming and scanning the blockchain
    IDLE,
    /// Server is actively consuming and scanning the blockchain,
    /// and attempting to publish fog reports, unless DB says the key is
    /// retired.
    ACTIVE,
}
