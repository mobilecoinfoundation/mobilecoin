// Copyright (c) 2018-2022 The MobileCoin Foundation

// Blockchain-related data types.

syntax = "proto3";
import "external.proto";
import "quorum_set.proto";

package blockchain;

option go_package = "mobilecoin/api";

// Block ID.
message BlockID {
    bytes data = 1;
}

// Hash of the block's contents.
message BlockContentsHash {
    bytes data = 1;
}

// A block in the blockchain.
message Block {
    // Block ID.
    BlockID id = 1;

    // Block format version.
    uint32 version = 2;

    // Id of the previous block.
    BlockID parent_id = 3;

    // The index of this block in the blockchain.
    uint64 index = 4;

    // The cumulative number of TXOs in the blockchain, including this block
    uint64 cumulative_txo_count = 5;

    // Root hash of the membership proofs provided by the untrusted local system for validation.
    // This captures the state of all TxOuts in the ledger that this block was validated against.
    external.TxOutMembershipElement root_element = 6;

    // Hash of the block's contents.
    BlockContentsHash contents_hash = 7;
}

message BlockContents {
    // Key images spent in this block.
    repeated external.KeyImage key_images = 1;

    // Outputs created in this block.
    repeated external.TxOut outputs = 2;

    /// mint-config transactions in this block coupled with data used to validate them.
    repeated external.ValidatedMintConfigTx validated_mint_config_txs = 3;

    /// Mint transactions in this block.
    repeated external.MintTx mint_txs = 4;
}

message BlockSignature {
    // The signature of the block.
    external.Ed25519Signature signature = 1;

    // The signer that generated the above signature.
    external.Ed25519Public signer = 2;

    // An approximate time in which the block was signed.
    // Represented as seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.
    uint64 signed_at = 3;
}

message BlockMetadataContents {
    // The Block ID.
    BlockID block_id = 1;

    // Quorum set configuration at the time of externalization.
    quorum_set.QuorumSet quorum_set = 2;

    // IAS report for the enclave which generated the signature.
    external.VerificationReport verification_report = 3;

    // Responder ID of the consensus node that externalized this block.
    string responder_id = 4;
}

message BlockMetadata {
    // Metadata signed by the consensus node.
    BlockMetadataContents contents = 1;

    // Message signing key (signer).
    external.Ed25519Public node_key = 2;

    // Signature using `node_key` over the Digestible encoding of `contents`.
    external.Ed25519Signature signature = 3;
}

// Version 1 of an archived block.
// Note: The block.version field within the block may or may not be equal to 1.
message ArchiveBlockV1 {
    // The block (header).
    Block block = 1;

    // Contents of the block.
    BlockContents block_contents = 2;

    // Block signature, when available.
    BlockSignature signature = 3;

    // Additional signed metadata about this block.
    BlockMetadata metadata = 4;
}

// An archived block.
message ArchiveBlock {
    oneof block {
        ArchiveBlockV1 v1 = 1;
    }
}

// A collection of archived blocks.
message ArchiveBlocks {
    repeated ArchiveBlock blocks = 1;
}
