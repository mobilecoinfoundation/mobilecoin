// Copyright (c) 2018-2020 MobileCoin Inc.

// MUST BE KEPT IN SYNC WITH RUST CODE!

syntax = "proto3";

package external;

option java_package = "com.mobilecoin.api";
option java_outer_classname = "MobileCoinAPI";

///////////////////////////////////////////////////////////////////////////////
// `keys` crate
///////////////////////////////////////////////////////////////////////////////

/// A Ristretto private key.
message RistrettoPrivate {
    bytes data = 1;
}

/// A 32-byte compressed Ristretto curve point (public key)
message CompressedRistretto {
    bytes data = 1;
}

/// A 32-byte scalar associated to the ristretto group.
/// This is the same as RistrettoPrivate, but they are used in different places.
/// TODO: MC-1605 Consider to factor out this type, or just this proto message.
message CurveScalar {
    bytes data = 1;
}

/// A 32-byte mobilecoin transaction key image.
message KeyImage {
    bytes data = 1;
}

/// An Ed25519 public key, for validating signatures.
message Ed25519Public {
    bytes data = 1;
}

/// An Ed25519 signature object
message Ed25519Signature {
    bytes data = 1;
}

/// Complete AccountKey, containing the pair of secret keys, which can be used
/// for spending, and optionally some Fog related info that is used to form
/// public addresses for accounts that sign up with Fog service.
///
/// This matches the Rust `transaction::AccountKey` struct.
message AccountKey {
    /// Private key 'a' used for view-key matching.
    RistrettoPrivate view_private_key = 1;

    /// Private key `b` used for spending.
    RistrettoPrivate spend_private_key = 2;

    /// Optional url of fog report server.
    /// Empty string when not in use, i.e. for accounts that don't have fog service.
    string fog_report_url = 3;

    /// Optional fog report key.
    /// The fog report server may serve multiple reports, this key disambiguates
    /// which one to use when sending to this account.
    string fog_report_key = 4;

    /// Optional fingerprint of fog authority key.
    /// Empty when not in use.
    bytes fog_authority_key_fingerprint = 5;
}

/// A public address, used to identify recipients.
message PublicAddress {
    /// View public key
    CompressedRistretto view_public_key = 1;

    /// Spend public key
    CompressedRistretto spend_public_key = 2;

    /// Optional url of fog report server.
    /// Empty string when not in use, i.e. for accounts that don't have fog service.
    /// Indicates the place at which the fog report server should be contacted.
    string fog_report_url = 3;

    /// Optional fog report key.
    /// The fog report server may serve multiple reports, this key disambiguates
    /// which one to use when sending to this account.
    string fog_report_key = 4;

    /// Signature of fog authority fingerprint using private key which
    /// corresponds to view_public_key.
    /// This should be a Schnorrkel signature.
    bytes fog_authority_sig = 5;
}

///////////////////////////////////////////////////////////////////////////////
// `trasaction/core` crate
///////////////////////////////////////////////////////////////////////////////

message Range {
    uint64 from = 1;
    uint64 to = 2;
}

message TxOutMembershipHash {
    bytes data = 1;
}

message TxOutMembershipElement {
    Range range = 1;
    TxOutMembershipHash hash = 2;
}

message TxOutMembershipProof {
    uint64 index = 1;
    uint64 highest_index = 2;
    repeated TxOutMembershipElement elements = 3;
}

// Amount.
message Amount {
    // A Pedersen commitment `v*G + s*H`
    CompressedRistretto commitment = 1;

    // `masked_value = value XOR_8 Blake2B("value_mask" || shared_secret)`
    uint64 masked_value = 2;
}

message EncryptedFogHint {
    bytes data = 1;
}

// A Transaction Output.
message TxOut {
    // Amount.
    Amount amount = 1;

    // Public key.
    CompressedRistretto target_key = 2;

    // Public key.
    CompressedRistretto public_key = 3;

    // 128 byte encrypted fog hint
    EncryptedFogHint e_account_hint = 4;
}

message TxIn {
    // "Ring" of inputs, one of which is actually being spent.
    repeated TxOut ring = 1;

    // Proof that each TxOut in `ring` is in the ledger.
    repeated TxOutMembershipProof proofs = 2;
}

// A transaction that a client submits to consensus
message TxPrefix {
    // Transaction inputs.
    repeated TxIn inputs = 1;

    // Transaction outputs.
    repeated TxOut outputs = 2;

    // Fee paid to the foundation for this transaction
    uint64 fee = 3;

    // The block index at which this transaction is no longer valid.
    uint64 tombstone_block = 4;
}

message RingMLSAG {
    CurveScalar c_zero = 1;
    repeated CurveScalar responses = 2;
    KeyImage key_image = 3;
}

message SignatureRctBulletproofs {
    repeated RingMLSAG ring_signatures = 1;
    repeated CompressedRistretto pseudo_output_commitments = 2;
    bytes range_proofs = 3;
}

message Tx {
    // The actual contents of the transaction.
    TxPrefix prefix = 1;

    // The RingCT signature on the prefix.
    SignatureRctBulletproofs signature = 2;
}

message TxHash {
    // Hash of a single transaction.
    bytes hash = 1;
}
