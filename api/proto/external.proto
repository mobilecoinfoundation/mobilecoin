// Copyright (c) 2018-2022 The MobileCoin Foundation

// MUST BE KEPT IN SYNC WITH RUST CODE!

syntax = "proto3";

package external;

option java_package = "com.mobilecoin.api";
option java_outer_classname = "MobileCoinAPI";
option go_package = "mobilecoin/api";

///////////////////////////////////////////////////////////////////////////////
// `keys` crate
///////////////////////////////////////////////////////////////////////////////

/// A Ristretto private key.
message RistrettoPrivate {
    bytes data = 1;
}

/// A 32-byte compressed Ristretto curve point (public key)
message CompressedRistretto {
    bytes data = 1;
}

/// An Ed25519 public key, for validating signatures.
message Ed25519Public {
    bytes data = 1;
}

/// An Ed25519 signature object
message Ed25519Signature {
    bytes data = 1;
}

///////////////////////////////////////////////////////////////////////////////
// `mc-crypto-multisig` crate
///////////////////////////////////////////////////////////////////////////////

message Ed25519MultiSig {
    repeated Ed25519Signature signatures = 1;
}

message Ed25519SignerSet {
    repeated Ed25519Public individual_signers = 1;
    repeated Ed25519SignerSet multi_signers = 3;
    uint32 threshold = 2;
}


///////////////////////////////////////////////////////////////////////////////
// `account-keys` crate
///////////////////////////////////////////////////////////////////////////////

/// Complete AccountKey, containing the pair of secret keys, which can be used
/// for spending, and optionally some Fog related info that is used to form
/// public addresses for accounts that sign up with Fog service.
///
/// This matches the Rust `transaction::AccountKey` struct.
message AccountKey {
    /// Private key 'a' used for view-key matching.
    RistrettoPrivate view_private_key = 1;

    /// Private key `b` used for spending.
    RistrettoPrivate spend_private_key = 2;

    /// Optional url of fog report server.
    /// Empty string when not in use, i.e. for accounts that don't have fog service.
    string fog_report_url = 3;

    /// Optional fog report id.
    /// The fog report server may serve multiple reports, this id disambiguates
    /// which one to use when sending to this account.
    string fog_report_id = 4;

    /// Optional fog authority subjectPublicKeyInfo.
    /// Empty when not in use.
    bytes fog_authority_spki = 5;
}

/// A public address, used to identify recipients.
message PublicAddress {
    /// View public key
    CompressedRistretto view_public_key = 1;

    /// Spend public key
    CompressedRistretto spend_public_key = 2;

    /// Optional url of fog report server.
    /// Empty string when not in use, i.e. for accounts that don't have fog service.
    /// Indicates the place at which the fog report server should be contacted.
    string fog_report_url = 3;

    /// Optional fog report id.
    /// The fog report server may serve multiple reports, this id disambiguates
    /// which one to use when sending to this account.
    string fog_report_id = 4;

    /// View key signature over the fog authority subjectPublicKeyInfo.
    ///
    /// This must be parseable as a RistrettoSignature.
    bytes fog_authority_sig = 5;
}

/// A KDF can be used to stretch a 32 byte secret into multiple secret private keys.
/// The RootIdentity is a compact form of a user's account key, if it has been
/// derived in this way. This may be useful for e.g. paper wallets.
message RootIdentity {
    /// The root entropy used to derive cryptonote private keys for this account
    RootEntropy root_entropy = 1;
    /// Optional url of fog report server, same as in AccountKey
    string fog_report_url = 2;
    /// Optional fog report id, same as in AccountKey
    string fog_report_id = 3;
    /// Optional fog authority subjectPublicKeyInfo.
    /// Empty when not in use.
    bytes fog_authority_spki = 5;
}

/// A 32 byte secret used as input key material to derive private keys
message RootEntropy {
    bytes data = 1;
}

///////////////////////////////////////////////////////////////////////////////
// `trasaction/core` crate
///////////////////////////////////////////////////////////////////////////////

/// A list of "known" token id's and their names.
///
/// Note that this is not an exhaustive list and clients should gracefully handle
/// the scenario that they receive a tx out with a token id they don't know about yet.
///
/// If changing this, please keep it in sync with the list defined in
/// mc-transaction-core in the tokens module.
enum KnownTokenId {
    MOB = 0;
}

/// A 32-byte scalar associated to the ristretto group.
/// This is the same as RistrettoPrivate, but they are used in different places.
/// TODO: MC-1605 Consider to factor out this type, or just this proto message.
message CurveScalar {
    bytes data = 1;
}

/// A 32-byte mobilecoin transaction key image.
message KeyImage {
    bytes data = 1;
}

message Range {
    uint64 from = 1;
    uint64 to = 2;
}

message TxOutMembershipHash {
    bytes data = 1;
}

message TxOutMembershipElement {
    Range range = 1;
    TxOutMembershipHash hash = 2;
}

message TxOutMembershipProof {
    uint64 index = 1;
    uint64 highest_index = 2;
    repeated TxOutMembershipElement elements = 3;
}

// A hash of the shared secret of a transaction output.
//
// Can be used by the recipient of a transaction output to verify that the
// bearer of this number knew the shared secret of the transaction output,
// thereby providing evidence that they are the sender.
message TxOutConfirmationNumber {
    bytes hash = 1;
}

// MaskedAmount.
message MaskedAmount {
    // A Pedersen commitment `v*G + s*H`
    CompressedRistretto commitment = 1;

    // `masked_value = value XOR_8 Blake2B("value_mask" || shared_secret)`
    fixed64 masked_value = 2;

    // `masked_token_id = token_id XOR_8 Blake2B("token_id_mask" || shared_secret)`
    bytes masked_token_id = 3;
}

// The bytes of encrypted fog hint
message EncryptedFogHint {
    bytes data = 1;
}

// The bytes of encrypted memo
message EncryptedMemo {
    bytes data = 1;
}

// A Transaction Output.
message TxOut {
    // Masked Amount.
    // The versioning indicates which shared secret derivation we are using.
    // For v1, the TxOut shared secret is used directly.
    // For v2, an intermediate secret called amount shared secret is used.
    oneof masked_amount {
        MaskedAmount masked_amount_v1 = 1;
        MaskedAmount masked_amount_v2 = 6;
    };

    // Public key.
    CompressedRistretto target_key = 2;

    // Public key.
    CompressedRistretto public_key = 3;

    // Encrypted fog hint payload.
    // This is an mc-crypto-box cryptogram for the fog ingest server,
    // or a random cryptogram indistinguishable from a real one.
    EncryptedFogHint e_fog_hint = 4;

    // Encrypted memo
    EncryptedMemo e_memo = 5;
}

message TxIn {
    // "Ring" of inputs, one of which is actually being spent.
    repeated TxOut ring = 1;

    // Proof that each TxOut in `ring` is in the ledger.
    repeated TxOutMembershipProof proofs = 2;

    // Any rules specified by the signed input
    InputRules input_rules = 3;
}

// Rules enforced on a transaction by a signed input within it (MCIP #31)
message InputRules {
    // Outputs required to appear in the TxPrefix for the Tx to be valid
    repeated TxOut required_outputs = 1;

    // A maximum value which the tombstone block for the Tx cannot exceed
    //
    // A value of zero here means no limit is enforced
    fixed64 max_tombstone_block = 2;

    // Outputs required to appear in the TxPrefix, but which are permitted to be
    // filled partially instead of fully, according to the "fill fraction" which
    // is inferred using the "partial fill change" output (MCIP #42)
    repeated RevealedTxOut partial_fill_outputs = 3;

    // A change output for any leftover from this input, which may occur during
    // a partial fill (MCIP #42).
    //
    // This field must be present whenever partial fills are used, because the
    // comparison of this "idealized" output and the corresponding "fractional"
    // change which appears in the TxPrefix is what determines the "fill fraction",
    // that is, the degree to which a counterparty is obliged to fill every
    // partial fill output in these rules.
    //
    // It is an error to use any of the partial fill options without also
    // setting this.
    RevealedTxOut partial_fill_change = 4;

    // A minimum fill value for the partial fill rules. (MCIP #42)
    // A counterparty who fills an SCI must keep at least this much of the offer
    // and can't return all of it as change if this is set.
    // This can be used to prevent griefing where someone fills your offer in exchange
    // for dust.
    // This minimum has no effect if set to 0.
    fixed64 min_partial_fill_value = 5;
}

// A TxOut together with its amount shared secret. This is sometimes needed to
// properly validate partial fill transactions (MCIP #42).
message RevealedTxOut {
    // The TxOut
    TxOut tx_out = 1;
    // Amount shared secret. This can be used to see the masked value and token id
    // and confirm that they match the amount commitment.
    //
    // This must be exactly 32 bytes, and should be derived from TxOut shared secret
    // using domain-separated SHA512 as in transaction-core.
    bytes amount_shared_secret = 2;
}

// A transaction that a client submits to consensus
message TxPrefix {
    // Transaction inputs.
    repeated TxIn inputs = 1;

    // Transaction outputs.
    repeated TxOut outputs = 2;

    // Fee paid to the foundation for this transaction
    uint64 fee = 3;

    // The block index at which this transaction is no longer valid.
    uint64 tombstone_block = 4;

    // Token id for the fee of this transaction
    fixed64 fee_token_id = 5;
}

// A ring mlsag is a group-ring signature conferring spending authority of one TxOut
// which is part of a TxIn.
message RingMLSAG {
    // The initial challenge value for the ring signature
    CurveScalar c_zero = 1;
    // The "responses", one for each input which is signed
    repeated CurveScalar responses = 2;
    // The key image is a hash unique to the "true" spent input. This cannot
    // be linked back to determine the true spent input, but the input cannot be
    // spent again without producing the same key image value, so this is used to
    // prevent double-spends.
    KeyImage key_image = 3;
}

message SignatureRctBulletproofs {
    // A ring-signature, one for each TxIn, producing one pseudo-output and key image.
    repeated RingMLSAG ring_signatures = 1;
    // The amount commitments for each pseudo-output.
    // There must be one of these for each TxIn.
    repeated CompressedRistretto pseudo_output_commitments = 2;
    // Before mixed transactions feature, there is one range proof for all pseudo-output
    // and output commitments, whose serialized bytes appear here.
    // After mixed transactions feature, this field is empty.
    bytes range_proof_bytes = 3;
    // Before mixed transactions feature, this field is empty.
    // After mixed transactions feature, this field contains one range proof for each
    // token id which appears in the transaction, in sorted order of token ids.
    // It range-proofs the pseudo-outputs and outputs with that token id, in the order
    // that they appear in the transaction.
    repeated bytes range_proofs = 4;
    // The token ids of each pseudo ouptut. There must be one of these for each TxIn.
    // Before mixed transactions feature, this field is empty, and the token ids of
    // all pseudo-outputs are inferred from the tx.prefix.fee_token_id.
    repeated fixed64 pseudo_output_token_ids = 5;
    // The token ids of each output. There must be one of these for each output of the Tx.
    // (tx.prefix.outputs).
    // Before mixed transactions feature, this field is empty, and the token ids of
    // all outputs are inferred from the tx.prefix.fee_token_id.
    repeated fixed64 output_token_ids = 6;
}

message Tx {
    // The actual contents of the transaction.
    TxPrefix prefix = 1;

    // The RingCT signature on the prefix.
    SignatureRctBulletproofs signature = 2;

    // Client's belief about the minimum fee map, expressed as a merlin digest.
    //
    // The enclave must reject the proposal if this doesn't match the enclave's
    // belief, to protect the client from information disclosure attacks.
    // (This is TOB-MCCT-5)
    bytes fee_map_digest = 3;
}

message TxHash {
    // Hash of a single transaction.
    bytes hash = 1;
}

// Given to the recipient of a transaction output by the sender so that the
// recipient may verify that the other party is indeed the sender.
//
// Often given to the recipient before the transaction is finalized so that
// the recipient may know to anticipate the arrival of a transaction output,
// as well as know who it's from, when to consider it as having surpassed
// the tombstone block, and the expected amount of the output.
message Receipt {
    // Public key of the TxOut.
    CompressedRistretto public_key = 1;

    // Confirmation number of the TxOut.
    TxOutConfirmationNumber confirmation = 2;

    // Tombstone block of the Tx that produced the TxOut.
    // Note: This value is self-reported by the sender and is unverifiable.
    uint64 tombstone_block = 3;

    // Amount of the TxOut.
    // Note: This value is self-reported by the sender and is unverifiable.
    oneof masked_amount {
        MaskedAmount masked_amount_v1 = 4;
        MaskedAmount masked_amount_v2 = 5;
    };
}

/// The signature over an IAS JSON reponse, created by Intel
message VerificationSignature {
    bytes contents = 1;
}

/// The IAS verification report response encoded as a protocol buffer
message VerificationReport {
    /// The IAS-generated signature over the response string
    VerificationSignature sig = 1;

    /// A list of byte strings representing the DER-encoded certificate
    /// chain provided by IAS.
    repeated bytes chain = 2;

    /// The raw report body JSON, as a byte sequence
    string http_body = 3;
}

/// The contents of a mint-tx, which is a transaction to mint new tokens.
message MintTxPrefix {
    /// Token ID we are minting.
    uint64 token_id = 1;

    /// Amount we are minting.
    uint64 amount = 2;

    /// The destination's public subaddress view key 'C'.
    CompressedRistretto view_public_key = 3;

    /// The destination's public subaddress spend key `D`.
    CompressedRistretto spend_public_key = 4;

    /// Nonce, to prevent replay attacks.
    /// Must be exactly 64 bytes long (see constant constants::NONCE_LENGTH).
    bytes nonce = 5;

    /// The block index at which this transaction is no longer valid.
    uint64 tombstone_block = 6;

    /// The (optional) encrypted fog hint of the minted TxOut.
    EncryptedFogHint e_fog_hint = 7;
}

/// A mint transaction coupled with a signature over it.
message MintTx {
    MintTxPrefix prefix = 1;
    Ed25519MultiSig signature = 2;
}

/// A minting configuration for a single token ID.
/// The minting configuration specifies who is allowed to submit mint
/// transactions, for which token and at what total limit.
message MintConfig {
    /// Token ID this configuration applies to.
    uint64 token_id = 1;

    /// The set of keys that can sign a minting transaction.
    Ed25519SignerSet signer_set = 2;

    /// The maximal amount this configuration can mint from the moment it has
    /// been applied.
    uint64 mint_limit = 3;
}

/// The contents of a mint-config transaction. This transaction alters the
/// minting configuration for a single token ID.
message MintConfigTxPrefix {
    /// Token ID we are replacing the configuration set for.
    uint64 token_id = 1;

    /// The new configuration.
    repeated MintConfig configs = 2;

    /// Nonce, to prevent replay attacks.
    /// Must be exactly 64 bytes long (see constant constants::NONCE_LENGTH).
    bytes nonce = 3;

    /// The block index at which this transaction is no longer valid.
    uint64 tombstone_block = 4;

    /// The maximal amount that can be minted by configurations specified in
    /// this tx. This amount is shared amongst all configs.
    uint64 total_mint_limit = 5;
}

/// A mint-config transaction coupled with a signature over it.
message MintConfigTx {
    MintConfigTxPrefix prefix = 1;
    Ed25519MultiSig signature = 2;
}

/// A mint-config transaction coupled with the data used to validate it.
message ValidatedMintConfigTx {
    MintConfigTx mint_config_tx = 1;
    Ed25519SignerSet signer_set = 2;
}

// The amount and blinding factor of a TxOut
message UnmaskedAmount {
    // The value of the amount commitment
    fixed64 value = 1;

    // The token_id of the amount commitment
    fixed64 token_id = 2;

    // The blinding factor of the amount commitment
    CurveScalar blinding = 3;
}

// A pre-signed transaction input with associated rules, as described in MCIP #31
message SignedContingentInput {
    // The block version rules used when making this signature
    uint32 block_version = 1;

    // The tx_in which was signed
    TxIn tx_in = 2;

    // The Ring MLSAG signature, conferring spending authority
    RingMLSAG mlsag = 3;

    // The amount and blinding of the pseudo-output of the MLSAG
    UnmaskedAmount pseudo_output_amount = 4;

    /// The amount and blinding of any TxOut required by the input rules
    repeated UnmaskedAmount required_output_amounts = 5;

    /// The tx_out global index of each ring member
    /// This helps the recipient of this payload construct proofs of membership for the ring
    repeated fixed64 tx_out_global_indices = 6;
}

// The amount of a Txout
message Amount {
    // The value of the amount
    fixed64 value = 1;

    // The token_id of the amount
    fixed64 token_id = 2;
}

/// The secrets corresponding to an output that we are trying to authorize
/// creation of
message OutputSecret {
    /// The amount of the output we are creating
    Amount amount = 1;

    /// The blinding factor of the output we are creating
    CurveScalar blinding = 2;
}

/// The secrets needed to create a signature that spends an existing output as
/// an input
message InputSecret {
    /// Represents either the one-time private key, or data to derive it
    oneof onetime_key_derive_data {
        RistrettoPrivate onetime_private_key = 1;
        fixed64 subaddress_index = 2;
    }

    /// The amount of the output we are spending
    Amount amount = 3;

    /// The blinding factor of the output we are spending
    CurveScalar blinding = 4;
}

/// A reduced representation of the TxOut's in the ring. For each ring
/// member we have only:
/// * The onetime-address (tx_out.target_key)
/// * The compressed commitment (tx_out.amount.commitment)
message ReducedTxOut {
    /// The tx_out.public_key field
    CompressedRistretto public_key = 1;

    /// The tx_out.target_key field
    CompressedRistretto target_key = 2;

    /// The tx_out.masked_amount.commitment field
    CompressedRistretto commitment = 3;
}

/// A representation of the part of the input ring needed to create an MLSAG
message SignableInputRing {
    /// A reduced representation of the TxOut's in the ring.
    repeated ReducedTxOut members = 1;

    /// The index of the TxOut in the ring that we are spending
    uint32 real_input_index = 2;

    /// The secrets needed to sign that input
    InputSecret input_secret = 3;
}

/// A presigned RingMLSAG and ancillary data needed to incorporate it into a
/// signature
message PresignedInputRing {
    /// The mlsag signature authorizing the spending of an input
    RingMLSAG mlsag = 1;

    /// The amount and blinding factor of the pseudo output
    OutputSecret pseudo_output_secret = 2;
}

/// An enum which is either a PresignedInputRing or a SignableInputRing
message InputRing {
    oneof ring {
        SignableInputRing signable = 1;
        PresignedInputRing presigned = 2;
    }
}

/// A structure containing an unsigned transaction, together with the data
/// required to sign it that does not involve the spend private key.
message UnsignedTx {
    /// The fully constructed TxPrefix.
    TxPrefix tx_prefix = 1;

    /// A "ring" of transaction outputs.
    repeated InputRing rings = 2;

    /// The block version that this transaction is valid for.
    uint32 block_version = 4;

    /// The unblinding data for each of the outputs we are creating.
    /// This also contains the output secrets needed for building the signature.
    /// (Those were previously at tag value 3)
    repeated TxOutSummaryUnblindingData tx_out_unblinding_data = 5;
}

message TxOutSummaryUnblindingData {
    /// An unmasked amount, corresponding to the MaskedAmount field
    /// The block version appears in the TxSummaryUnblindingData.
    UnmaskedAmount unmasked_amount = 1;

    /// The public address to which this TxOut is addressed.
    /// If this output comes from an SCI then we may not know the public
    /// address.
    PublicAddress address = 2;

    /// The tx_private_key generated for this TxOut. This is an entropy source
    /// which introduces randomness into the cryptonote stealth addresses
    /// (tx_public_key and tx_target_key) of the TxOut.
    ///
    /// If this output comes from an SCI then we may not know this.
    RistrettoPrivate tx_private_key = 3;
}

/// A structure that contains all the data required to sign a transaction that
/// does not rely on having the spend private key.
message SigningData {
    /// The bytes actually signed by MLSAG signatures.
    /// This is different depending on what block version we are in.
    /// * In the oldest block versions, this is a large number of bytes called the
    ///   "extended message", which includes a tx prefix as well as the pseudo output commitments.
    /// * In block version 2, this is instead 32 bytes called the "extended message digest".
    /// * In block version 3, this is instead 32 bytes called the "extended-message-and-tx-summary digest".
    ///
    /// Note that SCI's are the exception to this, they sign the digest based on their TxIn instead,
    /// see MCIP #31 for more on that. Everything that isn't an SCI signs this.
    bytes mlsag_signing_digest = 1;

    /// The actual pseudo output commitments use the blindings from
    /// `pseudo_output_blinding` and not the original true input.
    repeated CurveScalar pseudo_output_blindings = 2;

    /// Commitments of value equal to each real input.
    repeated CompressedRistretto pseudo_output_commitments = 3;

    /// Before mixed transactions feature, there is one range proof for all pseudo-output
    /// and output commitments, whose serialized bytes appear here.
    /// After mixed transactions feature, this field is empty.
    bytes range_proof_bytes = 4;

    /// Before mixed transactions feature, this field is empty.
    /// After mixed transactions feature, this field contains one range proof for each
    /// token id which appears in the transaction, in sorted order of token ids.
    /// It range-proofs the pseudo-outputs and outputs with that token id, in the order
    /// that they appear in the transaction.
    repeated bytes range_proofs = 5;

    /// The token ids of each pseudo ouptut. There must be one of these for each TxIn.
    /// Before mixed transactions feature, this field is empty, and the token ids of
    /// all pseudo-outputs are inferred from the tx.prefix.fee_token_id.
    repeated fixed64 pseudo_output_token_ids = 6;

    /// The token ids of each output. There must be one of these for each output of the Tx.
    /// (tx.prefix.outputs).
    /// Before mixed transactions feature, this field is empty, and the token ids of
    /// all outputs are inferred from the tx.prefix.fee_token_id.
    repeated fixed64 output_token_ids = 7;
}
