[package]
name = "consensus-service"
version = "1.0.0"
authors = ["MobileCoin"]
edition = "2018"

[lib]
name = "consensus_service"
path = "src/lib.rs"

[[bin]]
name = "consensus-service"
path = "src/bin/main.rs"

[dependencies]
attest = { path = "../../attest/core" }
attest-api = { path = "../../attest/api" }
attest-enclave-api = { path = "../../attest/enclave_api" }
attest-net = { path = "../../attest/net" }
attest-untrusted = { path = "../../attest/untrusted" }
build-info = { path = "../../build-info" }
common = { path = "../../common", features = ["log"] }
consensus-enclave = { path = "../../consensus/enclave" }
grpc-util = { path = "../../util/grpc" }
keys = { path = "../../crypto/keys" }
ledger-db = { path = "../../ledger/db" }
ledger-sync = { path = "../../ledger/sync" }
mcconnection = { path = "../../mcconnection" }
mcserial = { path = "../../util/mcserial" }
mcuri = { path = "../../util/mcuri" }
metered-channel = { path = "../../util/metered-channel" }
metrics = { path = "../../util/metrics" }
mobilecoin-api = { path = "../../consensus/api" }
peers = { path = "../../peers" }
scp = { path = "../../consensus/scp" }
sgx_slog = { path = "../../sgx/sgx_slog", features = ["std"] }
sgx_urts = { path = "../../sgx/sgx_urts" }
transaction = { path = "../../transaction/core"}
transaction-std = { path = "../../transaction/std"}

base64 = "0.11"
cfg-if = "0.1"
chrono = "0.4"
failure = "0.1.5"
fs_extra = "1.1"
futures = "0.1.16"
grpcio = "0.5.1"
handlebars = "2.0"
hex = "0.4"
lazy_static = "1.4"
prometheus = "0.7"
prost = { version = "0.6.1", default-features = false, features = ["prost-derive"] }
protobuf = "2.12"
rand = "0.7"
rand_hc = "0.2.0"
rayon = "1.2"
retry = "0.5"
rouille = "3.0"
serde = { version = "1.0", default-features = false, features = ["alloc", "derive"] }
serde_json = "1.0"
structopt = "0.3"
toml = "0.5"

[build-dependencies]
sgx_build = { path = "../../sgx/sgx_build" }

[dev-dependencies]
consensus-enclave-mock = { path = "../../consensus/enclave/mock" }
ledger-db = { path = "../../ledger/db", features = ["test_utils"] }
mc-util-from-random = { path = "../../util/from-random" }
mclogger-macros = { path = "../../util/mclogger-macros" }
peers-tests = { path = "../../peers/test-utils" }
rand_core = { version = "0.5", default-features = false }
rand_hc = "0.2.0"
tempdir = "0.3"
transaction-test-utils = { path = "../../transaction/core/test-utils" }

[target.'cfg(any(target_feature = "avx2", target_feature = "avx"))'.dev-dependencies]
curve25519-dalek = { version = "2.0", default-features = false, features = ["simd_backend", "nightly"] }

[target.'cfg(not(any(target_feature = "avx2", target_feature = "avx")))'.dev-dependencies]
curve25519-dalek = { version = "2.0", default-features = false, features = ["nightly", "u64_backend"] }
