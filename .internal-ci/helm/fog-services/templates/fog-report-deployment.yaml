# Copyright (c) 2018-2022 The MobileCoin Foundation
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "fogServices.fullname" . }}-fog-report
  labels:
    app: fog-report
    {{- include "fogServices.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.fogReport.replicaCount }}
  selector:
    matchLabels:
      app: fog-report
      {{- include "fogServices.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- toYaml .Values.fogReport.podAnnotations | nindent 8 }}
      labels:
        app: fog-report
        {{- include "fogServices.labels" . | nindent 8 }}
    spec:
      # Try to balance pods across zones
      topologySpreadConstraints:
      - topologyKey: topology.kubernetes.io/zone
        maxSkew: 1
        # Wait until we have nodes
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            # match on this helm chart install
            app: fog-report
            helm.sh/chart: {{ include "fogServices.chart" . }}
            {{- include "fogServices.selectorLabels" . | nindent 12 }}
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      initContainers:
      - name: sysctl
        image: ubuntu:20.04
        command:
        - sysctl
        - -w
        - net.ipv4.tcp_retries2=5
        - net.core.somaxconn=65535
        securityContext:
          privileged: true
          runAsUser: 0
          runAsNonRoot: False
      containers:
      - name: fog-report
        image: "{{ .Values.fogReport.image.org | default .Values.image.org }}/{{ .Values.fogReport.image.name }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        command: [ "/usr/bin/supervisord" ]
        ports:
        - name: report
          containerPort: 3222
        - name: mgmt
          containerPort: 8000
        envFrom:
        - configMapRef:
            name: fog-report
        env:
        - name: "RUST_BACKTRACE"
          value: {{ .Values.fogReport.rust.backtrace | quote }}
        - name: "RUST_LOG"
          value: {{ .Values.fogReport.rust.log | quote }}
        - name: "FOG_REPORT_SENTRY_DSN"
          valueFrom:
            configMapKeyRef:
              name: sentry
              key: fog-report-sentry-dsn
        # Maps to Sentry Environment
        - name: MC_BRANCH
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: FOGDB_HOST
          valueFrom:
            configMapKeyRef:
              name: fog-recovery-reader-0-postgresql
              key: postgresql-hostname
        - name: FOGDB_USER
          valueFrom:
            configMapKeyRef:
              name: fog-recovery-reader-0-postgresql
              key: postgresql-username
        - name: FOGDB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fog-recovery-postgresql
              key: postgresql-password
        - name: FOGDB_DATABASE
          valueFrom:
            configMapKeyRef:
              name: fog-recovery-reader-0-postgresql
              key: postgresql-database
        - name: FOGDB_SSL_OPTIONS
          valueFrom:
            configMapKeyRef:
              name: fog-recovery-reader-0-postgresql
              key: postgresql-ssl-options
        - name: DATABASE_URL
          value: "postgres://$(FOGDB_USER):$(FOGDB_PASSWORD)@$(FOGDB_HOST)/$(FOGDB_DATABASE)$(FOGDB_SSL_OPTIONS)"
                # Hold liveness and readiness until this probe passes.
        startupProbe:
          exec:
            command:
            - "/usr/local/bin/grpc_health_probe"
            - "-addr=:3222"
          # Wait 5 min for startup
          failureThreshold: 30
          periodSeconds: 10
        # Will wait for startup probe to succeed. When this passes k8s won't kill the service.
        livenessProbe:
          exec:
            command:
            - "/usr/local/bin/grpc_health_probe"
            - "-addr=:3222"
          failureThreshold: 5
          periodSeconds: 30
        # Will wait for startup probe to succeed. When this passes services/ingress will pass traffic
        readinessProbe:
          exec:
            command:
            - "/usr/local/bin/grpc_health_probe"
            - "-addr=:3222"
          failureThreshold: 2
          periodSeconds: 10
        volumeMounts:
        - name: supervisor-conf
          mountPath: /etc/supervisor/conf.d
          readOnly: true
        - name: signing-cert
          mountPath: /certs
          readOnly: true
        resources:
          {{- toYaml .Values.fogReport.resources | nindent 10 }}
      - name: grpc-gateway
        image: "{{ .Values.grpcGateway.image.org | default .Values.image.org }}/{{ .Values.grpcGateway.image.name }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: Always
        command:
        - /usr/bin/go-grpc-gateway
        - -grpc-server-endpoint=127.0.0.1:3222
        - -grpc-insecure
        - -http-server-listen=:8222
        - -logtostderr
        ports:
          - name: report-http
            containerPort: 8222
        resources:
          {{- toYaml .Values.grpcGateway.resources | nindent 10 }}
{{- if eq .Values.jaegerTracing.enabled true }}
      - name: jaeger-agent
        image: jaegertracing/jaeger-agent:latest
        imagePullPolicy: IfNotPresent
        ports:
          - containerPort: 5775
            name: zk-compact-trft
            protocol: UDP
          - containerPort: 5778
            name: config-rest
            protocol: TCP
          - containerPort: 6831
            name: jg-compact-trft
            protocol: UDP
          - containerPort: 6832
            name: jg-binary-trft
            protocol: UDP
          - containerPort: 14271
            name: admin-http
            protocol: TCP
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: HOST_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
        args:
          - --reporter.grpc.host-port={{ .Values.jaegerTracing.collector }}
          - --reporter.type=grpc
          - --agent.tags=cluster=undefined,container.name=fog-report,deployment.name={{ include "fogServices.fullname" . }},host.ip=${HOST_IP:},pod.name=${POD_NAME:},pod.namespace={{ .Release.Namespace }}
{{- end }}
      nodeSelector:
        {{- toYaml .Values.fogReport.nodeSelector | nindent 8 }}
      tolerations:
        {{- toYaml .Values.fogReport.tolerations | nindent 8 }}
      affinity:
        {{- toYaml .Values.fogReport.affinity | nindent 8 }}
      volumes:
      - name: signing-cert
        secret:
          secretName: fog-report-signing-cert
      - name: supervisor-conf
        projected:
          sources:
          - configMap:
              name: {{ include "fogServices.fullname" . }}-supervisord-daemon
          - configMap:
              name: {{ include "fogServices.fullname" . }}-supervisord-fog-report
          - configMap:
              name: {{ include "fogServices.fullname" . }}-supervisord-admin
