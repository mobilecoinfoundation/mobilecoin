# Copyright (c) 2018-2022 The MobileCoin Foundation
fullnameOverride: ''

imagePullSecrets:
- name: docker-credentials

image:
  org: mobilecoin
  tag: ''

### Shared values with child charts.
global:
  certManagerClusterIssuer: letsencrypt-production-http

  # Shared across all instances of consensusNodeConfig config.
  node:
    ledgerDistribution:
      awsAccessKeyId: ''
      awsSecretAccessKey: ''
      awsRegion: ''
      s3Bucket: ''
      startFrom: last

    networkConfig:
      threshold: ''
      peers: {}

    # tokensConfig:
    #   tokensSignedJson: |-
    #     { json }

  blocklist:
    enabled: "false"
    pattern: patterns/blocked-countries

### Enable to launch child chart to create node required configMaps and secrets.
#   See helm/consensus-node-config/values.yaml for config details.
consensusNodeConfig:
  enabled: false
  fullnameOverride: '{{ .Release.Name }}'
  node:
    client:
      hostname: ''
    peer:
      hostname: ''
    txSourceUrl: ''
    msgSignerKey:
      privateKey: ''

### Enable to launch child chart to create core common configMaps and secrets.
#   See helm/mc-core-common-config/values.yaml for config details.
mcCoreCommonConfig:
  enabled: false
  # clientAuth:
  #   token: ''
  # ias:
  #   key: ''
  #   spid: ''
  # mobileCoinNetwork:
  #   network: ''
  #   partner: ''
  # sentry:
  #   consensus-sentry-dsn: ''
  #   ledger-distribution-sentry-dsn: ''
  #   fog-report-sentry-dsn: ''
  #   fog-view-sentry-dsn: ''
  #   fog-ledger-sentry-dsn: ''
  #   fog-ingest-sentry-dsn: ''

# Consensus node settings
node:
  image:
    org: ''
    name: node_hw

  podAnnotations:
    fluentbit.io/include: 'true'
    fluentbit.io/exclude-jaeger-agent: 'true'

  nodeSelector:
    sgx-enabled-node: 'true'

  resources:
    limits:
      intel.com/sgx: 5000
    requests:
      intel.com/sgx: 5000

  tolerations:
  - key: sgx
    operator: Equal
    value: 'true'
    effect: NoSchedule

  initContainers: []

  persistence:
    enabled: true
    spec:
      storageClassName: fast
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 512Gi

  ingress:
    common:
      annotations:
        haproxy.org/server-ssl: 'false'             # The backend (server) is http
        haproxy.org/timeout-client: 239s            # 4 min timeout on azure
        haproxy.org/timeout-server: 239s
        haproxy.org/timeout-http-keep-alive: 120s
        haproxy.org/abortonclose: 'true'
        haproxy.org/backend-config-snippet: |-
          http-reuse aggressive

    grpc:
      annotations:
        haproxy.org/server-proto: 'h2'              # Force GRPC/H2 mode

    http:
      annotations:
        haproxy.org/path-rewrite: '/gw/(.*) /\1'    # Strip the /gw prefix

    clientAttest:
      rateLimits:
        enabled: true
        # Assume 2 ingress controllers.
        # Since this version of haproxy ingress doesn't have peering support we need to divide the
        # total requests we want to allow by the number of nodes.  Its a little bit funky since
        # we also need to assume that load-balancing between ingest nodes is even (or close enough).
        # Another limitation is this stick-table is shared across all ingresses that use the same
        # rate-limit-period.
        # rate limit attest endpoint to 60 requests/min from any single IP.
        annotations:
          haproxy.org/rate-limit-status-code: "429"
          haproxy.org/rate-limit-requests: "60"
          # rate-limit-period is defined in _helpers.tpl based on the consensus node instance number

# GRPC Gateway settings
grpcGateway:
  image:
    org: ''
    name: go-grpc-gateway
  nodeSelector: {}

# Disable Client Connects
acceptClientConnections: true

jaegerTracing:
  enabled: true
  collector: 'dns:///jaeger-collector:14250'
