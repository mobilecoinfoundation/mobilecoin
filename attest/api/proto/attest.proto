// Copyright (c) 2018-2022 The MobileCoin Foundation

/// This file defines the API to allow for a client to conduct an authenticated
/// key exchange using a derivative of the noise protocol
syntax = "proto3";

package attest;

option go_package = "mobilecoin/api";

/// A server-authenticated service for SGX enclaves. The responder is the
/// attesting enclave, and the client is unauthenticated. When described
/// within the noise protocol, this is similar to the "IX" style key exchange:
///
/// ```txt
/// IX:
///   -> e, s
///   <- e, ee, se, s, es
///   ->
///   <-
/// ```
///
/// The first two messages are contained within the Auth and AuthResponse
service AttestedApi {
    /// This API call is made when one enclave wants to start a mutually-
    /// authenticated key-exchange session with an enclave.
    rpc Auth(AuthMessage) returns (AuthMessage);
}

/// The first message of an exchange, sent by a client.
///
/// This contains the client's one-time ephemeral public key, and the
/// cryptographic parameters which will be used in future messages.
message AuthMessage {
        /// A potentially encrypted bytestream containing opaque data intended
        /// for use in the enclave.
        bytes data = 1;
}

/// AEAD messages sent to and from authenticated clients.
message Message {
        /// A byte array containing plaintext authenticated data.
        bytes aad = 1;
        /// An byte array containing the channel ID this message is
        /// associated with. A zero-length channel ID is not valid.
        bytes channel_id = 2;
        /// A potentially encrypted bytestream containing opaque data intended
        /// for use in the enclave.
        bytes data = 3;
}

/// An AEAD message with an explicit nonce.
///
/// This message is technically compatible with [`Message`], but exists to
/// ensure generated code doesn't use Message.
message NonceMessage {
        /// A byte array containing plaintext authenticated data.
        bytes aad = 1;
        /// An byte array containing the channel ID this message is
        /// associated with. A zero-length channel ID is not valid.
        bytes channel_id = 2;
        /// A potentially encrypted bytestream containing opaque data intended
        /// for use in the enclave.
        bytes data = 3;
        /// The explicit nonce.
        fixed64 nonce = 4;
}

/// SGX quote version 3 as specified in
/// <https://download.01.org/intel-sgx/latest/dcap-latest/linux/docs/Intel_SGX_ECDSA_QuoteLibReference_DCAP_API.pdf#%5B%7B%22num%22%3A73%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C52%2C375%2C0%5D>.
message Quote3 {
        /// The raw bytestream of the quote. This will contain only the
        /// bytes specified in <https://download.01.org/intel-sgx/latest/dcap-latest/linux/docs/Intel_SGX_ECDSA_QuoteLibReference_DCAP_API.pdf#%5B%7B%22num%22%3A73%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C52%2C375%2C0%5D>
        bytes data = 1;
}

/// A representation of
/// [`sgx_ql_qve_collateral_t`](https://download.01.org/intel-sgx/latest/dcap-latest/linux/docs/Intel_SGX_ECDSA_QuoteLibReference_DCAP_API.pdf#%5B%7B%22num%22%3A70%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C52%2C230%2C0%5D)
/// All certificate and CRL values are DER encoded.
/// All fields should be present
message Collateral {
        /// The Provisioning Certification Key (PCK) certificate revocation list
        /// (CRL) issuer chain. This is a sequence of DER formatted certificates.
        ///
        /// This chain is used to verify the `pck_crl`. The consumers should
        /// have the root CA, which signed this issuer chain.
        repeated bytes pck_crl_issuer_chain = 1;
        /// The root certificate authority (CA) certificate revocation list
        /// (CRL) in DER format.
        ///
        /// This will be the "Intel® SGX Root CA CRL" described in
        /// <https://api.trustedservices.intel.com/documents/Intel_SGX_PCK_Certificate_CRL_Spec-1.5.pdf>.
        ///
        /// It can manually be retrieved from
        /// <https://certificates.trustedservices.intel.com/IntelSGXRootCA.der>
        bytes root_ca_crl = 2;
        /// The the Provisioning Certification Key (PCK) certificate revocation
        /// list (CRL) in DER format.
        ///
        /// This will be the "Intel® SGX PCK Processor CA CRL" described in
        /// <https://api.trustedservices.intel.com/documents/Intel_SGX_PCK_Certificate_CRL_Spec-1.5.pdf>.
        bytes pck_crl = 3;
        /// The Trusted Computing Base (TCB) info issuer chain.
        /// This is a sequence of DER formatted certificates.
        ///
        /// This is the x509 certificate chain that can verify the signature on
        /// the `tcb_info`. Consumers should have the root CA which signed this
        /// issuer chain.
        repeated bytes tcb_info_issuer_chain = 4;
        /// The Trusted Computing Base (TCB) info.
        ///
        /// JSON formatted TCB info described at
        /// <https://api.portal.trustedservices.intel.com/documentation#pcs-tcb-info-v4>
        string tcb_info = 5;
        /// The Quoting Enclave (QE) identity issuer chain.
        ///
        /// This is the x509 certificate chain that can verify the signature on
        /// the `qe_identity`. Consumers should have the root CA which signed
        /// this issuer chain.
        repeated bytes qe_identity_issuer_chain = 6;
        /// The Quoting Enclave (QE) identity.
        ///
        /// JSON formatted QE identity info described at
        /// <https://api.portal.trustedservices.intel.com/documentation#pcs-enclave-identity-v4>
        string qe_identity = 7;
}
