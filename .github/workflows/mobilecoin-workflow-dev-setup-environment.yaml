# Copyright (c) 2018-2022 The MobileCoin Foundation
#
# MobileCoin Core projects - Reusable Workflow - Deploy core apps to to the development namespace.

name: mobilecoin-workflow-dev-setup-environment

on:
  workflow_call:
    inputs:
      block_version:
        description: "block_version"
        type: string
        required: true
      chart_repo:
        description: "Chart Repo URL"
        type: string
        required: false
        default: https://harbor.mobilecoin.com/chartrepo/mobilecoinfoundation-public
      namespace:
        description: "Target Namespace"
        type: string
        required: true
      version:
        description: "Chart Version"
        type: string
        required: true
    secrets:
      DEV_FOG_REPORT_B_SIGNING_CA_CERT:
        description: "Fog Report signing CA cert"
        required: true
      DEV_FOG_REPORT_B_SIGNING_CERT:
        description: "Fog Report signing cert pem"
        required: true
      DEV_FOG_REPORT_B_SIGNING_CERT_KEY:
        description: "Fog Report signing cert key"
        required: true
      DEV_FOG_REPORT_SIGNING_CA_CERT:
        description: "Fog Report signing CA cert"
        required: true
      DEV_FOG_REPORT_SIGNING_CERT:
        description: "Fog Report signing cert pem"
        required: true
      DEV_FOG_REPORT_SIGNING_CERT_KEY:
        description: "Fog Report signing cert key"
        required: true
      DEV_IAS_KEY:
        description: "IAS"
        required: true
      DEV_IAS_SPID:
        description: "IAS"
        required: true
      DEV_KEYS_SEED_FOG:
        description: "static wallet seed"
        required: true
      DEV_KEYS_SEED_INITIAL:
        description: "static wallet seed"
        required: true
      DEV_KEYS_SEED_MNEMONIC:
        description: "static wallet seed"
        required: true
      DEV_KEYS_SEED_MNEMONIC_FOG:
        description: "static wallet seed"
        required: true
      DEV_LEDGER_AWS_ACCESS_KEY_ID:
        description: "Ledger AWS S3 access"
        required: true
      DEV_LEDGER_AWS_SECRET_ACCESS_KEY:
        description: "Ledger AWS S3 access"
        required: true
      DEV_MINTING_1_GOVERNOR_1_PRIVATE:
        description: "minting governor key"
        required: true
      DEV_MINTING_1_GOVERNOR_1_PUBLIC:
        description: "minting governor key"
        required: true
      DEV_MINTING_1_SIGNER_1_PRIVATE:
        description: "minting governor key"
        required: true
      DEV_MINTING_1_SIGNER_1_PUBLIC:
        description: "minting governor key"
        required: true
      DEV_MINTING_8192_GOVERNOR_1_PRIVATE:
        description: "minting governor key"
        required: true
      DEV_MINTING_8192_GOVERNOR_1_PUBLIC:
        description: "minting governor key"
        required: true
      DEV_MINTING_8192_SIGNER_1_PRIVATE:
        description: "minting signer key"
        required: true
      DEV_MINTING_8192_SIGNER_1_PUBLIC:
        description: "minting signer key"
        required: true
      DEV_POSTGRESQL_FOG_RECOVERY_PASSWORD:
        description: "password for fog_recovery database"
        required: true
      DEV_RANCHER_CLUSTER:
        description: "Rancher cluster name"
        required: true
      DEV_RANCHER_URL:
        description: "Rancher server URL"
        required: true
      DEV_RANCHER_TOKEN:
        description: "Rancher access token"
        required: true
      DEV_TOKENS_CONFIG_V1_JSON:
        description: "dev signed tokens config json"
        required: true
      DEV_TOKENS_CONFIG_V2_JSON:
        description: "dev signed tokens config json"
        required: true
      IP_INFO_TOKEN:
        description: "ipinfo.io token for authenticated access"
        required: true
      MAIN_IAS_KEY:
        description: "MainNet IAS"
        required: true
      MAIN_IAS_SPID:
        description: "MainNet IAS"
        required: true
      MAIN_TOKENS_CONFIG_V1_JSON:
        description: "MainNet signed tokens config json"
        required: true
      MAIN_TOKENS_CONFIG_V2_JSON:
        description: "MainNet signed tokens config json"
        required: true
      TEST_IAS_KEY:
        description: "TestNet IAS"
        required: true
      TEST_IAS_SPID:
        description: "TestNet IAS"
        required: true
      TEST_TOKENS_CONFIG_V1_JSON:
        description: "TestNet signed tokens config json"
        required: true
      TEST_TOKENS_CONFIG_V2_JSON:
        description: "TestNet signed tokens config json"
        required: true

env:
  BASE_PATH: .tmp
  MINTING_BASE_PATH: .tmp/minting
  SEEDS_BASE_PATH: .tmp/seeds
  VALUES_BASE_PATH: .tmp/values
  TOKENS_PATH: .tmp/tokens.signed.json
  PG_PATH: .tmp/pg
  CERTS_BASE_PATH: .tmp/certs
  MOBILECOIND_BASE_PATH: ./tmp/mobilecoind

jobs:
  setup-environment:
    runs-on: [self-hosted, Linux, small]
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Create namespace
      uses: mobilecoinofficial/gha-k8s-toolbox@v1
      with:
        action: namespace-create
        namespace: ${{ inputs.namespace }}
        rancher_cluster: ${{ secrets.DEV_RANCHER_CLUSTER }}
        rancher_url: ${{ secrets.DEV_RANCHER_URL }}
        rancher_token: ${{ secrets.DEV_RANCHER_TOKEN }}

    - name: Write seeds and fog-report values
      run: |
        # Create seeds dir.
        mkdir -p "${SEEDS_BASE_PATH}"

        # Write values to be used as k8s secret values.
        echo -n "${{ secrets.DEV_KEYS_SEED_INITIAL }}" > "${SEEDS_BASE_PATH}/INITIAL_KEYS_SEED"
        echo -n "${{ secrets.DEV_KEYS_SEED_FOG }}" > "${SEEDS_BASE_PATH}/FOG_KEYS_SEED"
        echo -n "${{ secrets.DEV_KEYS_SEED_MNEMONIC }}" > "${SEEDS_BASE_PATH}/MNEMONIC_KEYS_SEED"
        echo -n "${{ secrets.DEV_KEYS_SEED_MNEMONIC_FOG }}" > "${SEEDS_BASE_PATH}/MNEMONIC_FOG_KEYS_SEED"
        echo -n "${{ secrets.DEV_FOG_REPORT_SIGNING_CA_CERT }}" > "${SEEDS_BASE_PATH}/FOG_REPORT_SIGNING_CA_CERT"
        echo -n "${{ secrets.DEV_FOG_REPORT_B_SIGNING_CA_CERT }}" > "${SEEDS_BASE_PATH}/FOG_REPORT_B_SIGNING_CA_CERT"
        echo -n "/wallet-seeds/FOG_REPORT_SIGNING_CA_CERT" > "${SEEDS_BASE_PATH}/FOG_REPORT_SIGNING_CA_CERT_PATH"
        echo -n "/wallet-seeds/FOG_REPORT_B_SIGNING_CA_CERT" > "${SEEDS_BASE_PATH}/FOG_REPORT_B_SIGNING_CA_CERT_PATH"
        echo -n "fog://fog.${{ inputs.namespace }}.development.mobilecoin.com:443" > "${SEEDS_BASE_PATH}/FOG_REPORT_URL"
        echo -n "fog://fog-b.${{ inputs.namespace }}.development.mobilecoin.com:443" > "${SEEDS_BASE_PATH}/FOG_REPORT_B_URL"

    - name: Create wallet key secrets
      uses: mobilecoinofficial/gha-k8s-toolbox@v1
      with:
        action: secrets-create-from-file
        namespace: ${{ inputs.namespace }}
        rancher_cluster: ${{ secrets.DEV_RANCHER_CLUSTER }}
        rancher_url: ${{ secrets.DEV_RANCHER_URL }}
        rancher_token: ${{ secrets.DEV_RANCHER_TOKEN }}
        object_name: sample-keys-seeds
        src: ${{ env.SEEDS_BASE_PATH }}

    - name: Write minting keys
      run: |
        # Create minting secrets dir
        mkdir -p "${MINTING_BASE_PATH}"

        # Write values to be used as k8s secret values.
        echo -n "${{ secrets.DEV_MINTING_1_GOVERNOR_1_PRIVATE }}" > "${MINTING_BASE_PATH}/token_1_governor_1.private.pem"
        echo -n "${{ secrets.DEV_MINTING_1_GOVERNOR_1_PUBLIC }}" > "${MINTING_BASE_PATH}/token_1_governor_1.public.pem"
        echo -n "${{ secrets.DEV_MINTING_1_SIGNER_1_PRIVATE }}" > "${MINTING_BASE_PATH}/token_1_signer_1.private.pem"
        echo -n "${{ secrets.DEV_MINTING_1_SIGNER_1_PUBLIC }}" > "${MINTING_BASE_PATH}/token_1_signer_1.public.pem"
        echo -n "${{ secrets.DEV_MINTING_8192_GOVERNOR_1_PRIVATE }}" > "${MINTING_BASE_PATH}/token_8192_governor_1.private.pem"
        echo -n "${{ secrets.DEV_MINTING_8192_GOVERNOR_1_PUBLIC }}" > "${MINTING_BASE_PATH}/token_8192_governor_1.public.pem"
        echo -n "${{ secrets.DEV_MINTING_8192_SIGNER_1_PRIVATE }}" > "${MINTING_BASE_PATH}/token_8192_signer_1.private.pem"
        echo -n "${{ secrets.DEV_MINTING_8192_SIGNER_1_PUBLIC }}" > "${MINTING_BASE_PATH}/token_8192_signer_1.public.pem"

        # values for v3.0.0-dev release
        echo -n "${{ secrets.DEV_MINTING_8192_GOVERNOR_1_PRIVATE }}" > "${MINTING_BASE_PATH}/minter8192_governor.private.pem"
        echo -n "${{ secrets.DEV_MINTING_8192_GOVERNOR_1_PUBLIC }}" > "${MINTING_BASE_PATH}/minter8192_governor.public.pem"
        echo -n "${{ secrets.DEV_MINTING_8192_SIGNER_1_PRIVATE }}" > "${MINTING_BASE_PATH}/token8192_signer.private.pem"
        echo -n "${{ secrets.DEV_MINTING_8192_SIGNER_1_PUBLIC }}" > "${MINTING_BASE_PATH}/token8192_signer.public.pem"

    - name: Create minting key secrets
      uses: mobilecoinofficial/gha-k8s-toolbox@v1
      with:
        action: secrets-create-from-file
        namespace: ${{ inputs.namespace }}
        rancher_cluster: ${{ secrets.DEV_RANCHER_CLUSTER }}
        rancher_url: ${{ secrets.DEV_RANCHER_URL }}
        rancher_token: ${{ secrets.DEV_RANCHER_TOKEN }}
        object_name: consensus-minting-secrets
        src: ${{ env.MINTING_BASE_PATH }}

    - name: Write tokens.signed.json
      env:
        DEV_TOKENS_CONFIG_V1_JSON: ${{ secrets.DEV_TOKENS_CONFIG_V1_JSON }}
        DEV_TOKENS_CONFIG_V2_JSON: ${{ secrets.DEV_TOKENS_CONFIG_V2_JSON }}
        MAIN_TOKENS_CONFIG_V1_JSON: ${{ secrets.MAIN_TOKENS_CONFIG_V1_JSON }}
        MAIN_TOKENS_CONFIG_V2_JSON: ${{ secrets.MAIN_TOKENS_CONFIG_V2_JSON }}
        TEST_TOKENS_CONFIG_V1_JSON: ${{ secrets.TEST_TOKENS_CONFIG_V1_JSON }}
        TEST_TOKENS_CONFIG_V2_JSON: ${{ secrets.TEST_TOKENS_CONFIG_V2_JSON }}
      run: |
        # Create base path
        mkdir -p "${BASE_PATH}"

        # Set dev/main/test tokens file based on semver tag.
        .internal-ci/util/set_tokens_config_version.sh ${{ inputs.version }} > "${TOKENS_PATH}"

    - name: Generate environment values file
      env:
        DEV_IAS_KEY: ${{ secrets.DEV_IAS_KEY }}
        DEV_IAS_SPID: ${{ secrets.DEV_IAS_SPID }}
        LEDGER_AWS_ACCESS_KEY_ID: ${{ secrets.DEV_LEDGER_AWS_ACCESS_KEY_ID }}
        LEDGER_AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_LEDGER_AWS_SECRET_ACCESS_KEY }}
        IP_INFO_TOKEN: ${{ secrets.IP_INFO_TOKEN }}
      run: |
        # Create values base path
        mkdir -p "${VALUES_BASE_PATH}"

        # Generate values for standard dev cluster deployment.
        .internal-ci/util/generate_dev_values-v5.1.sh ${{ inputs.version }} > "${VALUES_BASE_PATH}/mc-core-dev-env-values.yaml"

    - name: Deploy environment setup
      uses: mobilecoinofficial/gha-k8s-toolbox@v1
      with:
        action: helm-deploy
        chart_repo: ${{ inputs.chart_repo }}
        chart_name: mc-core-dev-env-setup
        chart_version: ${{ inputs.version }}
        chart_values: ${{ env.VALUES_BASE_PATH }}/mc-core-dev-env-values.yaml
        chart_set: |
          --set=global.node.nodeConfig.blockVersion=${{ inputs.block_version }}
        release_name: mc-core-dev-env-setup
        namespace: ${{ inputs.namespace }}
        rancher_cluster: ${{ secrets.DEV_RANCHER_CLUSTER }}
        rancher_url: ${{ secrets.DEV_RANCHER_URL }}
        rancher_token: ${{ secrets.DEV_RANCHER_TOKEN }}

    - name: Write fog-report signing certificate
      run: |
        # Create secrets dir
        mkdir -p "${CERTS_BASE_PATH}/fog-report-a"
        mkdir -p "${CERTS_BASE_PATH}/fog-report-b"

        # Write values to be used as k8s secret values.
        echo -n "${{ secrets.DEV_FOG_REPORT_SIGNING_CERT }}" > "${CERTS_BASE_PATH}/fog-report-a/tls.crt"
        echo -n "${{ secrets.DEV_FOG_REPORT_SIGNING_CERT_KEY }}" > "${CERTS_BASE_PATH}/fog-report-a/tls.key"
        echo -n "${{ secrets.DEV_FOG_REPORT_B_SIGNING_CERT }}" > "${CERTS_BASE_PATH}/fog-report-b/tls.crt"
        echo -n "${{ secrets.DEV_FOG_REPORT_B_SIGNING_CERT_KEY }}" > "${CERTS_BASE_PATH}/fog-report-b/tls.key"

    - name: Create fog-report-signing-cert-a secret
      uses: mobilecoinofficial/gha-k8s-toolbox@v1
      with:
        action: secrets-create-from-file
        namespace: ${{ inputs.namespace }}
        rancher_cluster: ${{ secrets.DEV_RANCHER_CLUSTER }}
        rancher_url: ${{ secrets.DEV_RANCHER_URL }}
        rancher_token: ${{ secrets.DEV_RANCHER_TOKEN }}
        object_name: fog-report-signing-cert-a
        src: ${{ env.CERTS_BASE_PATH }}/fog-report-a

    - name: Create fog-report-signing-cert-b secret
      uses: mobilecoinofficial/gha-k8s-toolbox@v1
      with:
        action: secrets-create-from-file
        namespace: ${{ inputs.namespace }}
        rancher_cluster: ${{ secrets.DEV_RANCHER_CLUSTER }}
        rancher_url: ${{ secrets.DEV_RANCHER_URL }}
        rancher_token: ${{ secrets.DEV_RANCHER_TOKEN }}
        object_name: fog-report-signing-cert-b
        src: ${{ env.CERTS_BASE_PATH }}/fog-report-b

    - name: Generate postgres cm and secret
      run: |
        mkdir -p "${PG_PATH}/cm"
        mkdir -p "${PG_PATH}/cm-reader"
        mkdir -p "${PG_PATH}/sec"

        # primary
        echo -n "fog_recovery" > "${PG_PATH}/cm/postgres-database"
        echo -n "fog-recovery-postgresql-primary" > "${PG_PATH}/cm/postgres-hostname"
        echo -n "5432" > "${PG_PATH}/cm/postgres-port"
        echo -n "?sslmode=disable" > "${PG_PATH}/cm/postgres-ssl-options"
        echo -n "postgres" > "${PG_PATH}/cm/postgres-username"

        # reader
        echo -n "fog_recovery" > "${PG_PATH}/cm-reader/postgres-database"
        echo -n "fog-recovery-postgresql-read" > "${PG_PATH}/cm-reader/postgres-hostname"
        echo -n "5432" > "${PG_PATH}/cm-reader/postgres-port"
        echo -n "?sslmode=disable" > "${PG_PATH}/cm-reader/postgres-ssl-options"
        echo -n "postgres" > "${PG_PATH}/cm-reader/postgres-username"

        # secret
        echo -n "${{ secrets.DEV_POSTGRESQL_FOG_RECOVERY_PASSWORD }}" > "${PG_PATH}/sec/postgres-password"
        echo -n "${{ secrets.DEV_POSTGRESQL_FOG_RECOVERY_PASSWORD }}" > "${PG_PATH}/sec/replication-password"

    - name: Create pg primary cm
      uses: mobilecoinofficial/gha-k8s-toolbox@v1
      with:
        action: configmap-create-from-file
        namespace: ${{ inputs.namespace }}
        rancher_cluster: ${{ secrets.DEV_RANCHER_CLUSTER }}
        rancher_url: ${{ secrets.DEV_RANCHER_URL }}
        rancher_token: ${{ secrets.DEV_RANCHER_TOKEN }}
        object_name: fog-recovery-postgresql
        src: ${{ env.PG_PATH }}/cm

    - name: Create pg reader cm
      uses: mobilecoinofficial/gha-k8s-toolbox@v1
      with:
        action: configmap-create-from-file
        namespace: ${{ inputs.namespace }}
        rancher_cluster: ${{ secrets.DEV_RANCHER_CLUSTER }}
        rancher_url: ${{ secrets.DEV_RANCHER_URL }}
        rancher_token: ${{ secrets.DEV_RANCHER_TOKEN }}
        object_name: fog-recovery-reader-0-postgresql
        src: ${{ env.PG_PATH }}/cm-reader

    - name: Create pg primary secrets
      uses: mobilecoinofficial/gha-k8s-toolbox@v1
      with:
        action: secrets-create-from-file
        namespace: ${{ inputs.namespace }}
        rancher_cluster: ${{ secrets.DEV_RANCHER_CLUSTER }}
        rancher_url: ${{ secrets.DEV_RANCHER_URL }}
        rancher_token: ${{ secrets.DEV_RANCHER_TOKEN }}
        object_name: fog-recovery-postgresql
        src: ${{ env.PG_PATH }}/sec

    - name: Create pg reader secrets
      uses: mobilecoinofficial/gha-k8s-toolbox@v1
      with:
        action: secrets-create-from-file
        namespace: ${{ inputs.namespace }}
        rancher_cluster: ${{ secrets.DEV_RANCHER_CLUSTER }}
        rancher_url: ${{ secrets.DEV_RANCHER_URL }}
        rancher_token: ${{ secrets.DEV_RANCHER_TOKEN }}
        object_name: fog-recovery-reader-0-postgresql
        src: ${{ env.PG_PATH }}/sec

    - name: Generate mobilecoind ConfigMap file
      run: |
        mkdir -p "${MOBILECOIND_BASE_PATH}"
        p1="node1.${{ inputs.namespace }}.development.mobilecoin.com"
        p2="node2.${{ inputs.namespace }}.development.mobilecoin.com"
        p3="node3.${{ inputs.namespace }}.development.mobilecoin.com"


        tx_base="s3-eu-central-1.amazonaws.com"
        tx_bucket="mobilecoin.eu.development.chain"
        tx1="https://${tx_base}/${tx_bucket}/${p1}/"
        tx2="https://${tx_base}/${tx_bucket}/${p2}/"
        tx3="https://${tx_base}/${tx_bucket}/${p3}/"

        q="{\"threshold\": 2, \"members\": [{\"args\":\"${p1}:443\",\"type\":\"Node\"},{\"args\":\"${p2}:443\",\"type\":\"Node\"},{\"args\":\"${p3}:443\",\"type\":\"Node\"}]}"

        echo -n "mc://${p1}:443,mc://${p2}:443,mc://${p3}:443" > "${MOBILECOIND_BASE_PATH}/MC_PEER"
        echo -n "${tx1},${tx2},${tx3}" > "${MOBILECOIND_BASE_PATH}/MC_TX_SOURCE_URL"
        echo -n "${q}" > "${MOBILECOIND_BASE_PATH}/MC_QUORUM_SET"

    - name: Create mobilecoind configmap
      uses: mobilecoinofficial/gha-k8s-toolbox@v1
      with:
        action: configmap-create-from-file
        namespace: ${{ inputs.namespace }}
        rancher_cluster: ${{ secrets.DEV_RANCHER_CLUSTER }}
        rancher_url: ${{ secrets.DEV_RANCHER_URL }}
        rancher_token: ${{ secrets.DEV_RANCHER_TOKEN }}
        object_name: fog-mobilecoind
        src: ${{ env.MOBILECOIND_BASE_PATH }}

    - name: Write tokens.signed.json
      env:
        DEV_TOKENS_CONFIG_V1_JSON: ${{ secrets.DEV_TOKENS_CONFIG_V1_JSON }}
        DEV_TOKENS_CONFIG_V2_JSON: ${{ secrets.DEV_TOKENS_CONFIG_V2_JSON }}
        MAIN_TOKENS_CONFIG_V1_JSON: ${{ secrets.MAIN_TOKENS_CONFIG_V1_JSON }}
        MAIN_TOKENS_CONFIG_V2_JSON: ${{ secrets.MAIN_TOKENS_CONFIG_V2_JSON }}
        TEST_TOKENS_CONFIG_V1_JSON: ${{ secrets.TEST_TOKENS_CONFIG_V1_JSON }}
        TEST_TOKENS_CONFIG_V2_JSON: ${{ secrets.TEST_TOKENS_CONFIG_V2_JSON }}
      run: |
        # Create base path
        mkdir -p "${BASE_PATH}"

        # Set dev/main/test tokens file based on semver tag.
        .internal-ci/util/set_tokens_config_version.sh ${{ inputs.version }} > "${TOKENS_PATH}"

    - name: Deploy PostgreSQL instance
      uses: mobilecoinofficial/gha-k8s-toolbox@v1
      with:
        action: helm-deploy
        chart_repo: https://charts.bitnami.com/bitnami
        chart_name: postgresql
        chart_version: 11.9.13
        chart_set: |
          --set=global.postgresql.auth.existingSecret=fog-recovery-postgresql
          --set=global.postgresql.auth.database=fog_recovery
          --set=architecture=replication
        chart_wait_timeout: 5m
        release_name: fog-recovery-postgresql
        namespace: ${{ inputs.namespace }}
        rancher_cluster: ${{ secrets.DEV_RANCHER_CLUSTER }}
        rancher_url: ${{ secrets.DEV_RANCHER_URL }}
        rancher_token: ${{ secrets.DEV_RANCHER_TOKEN }}
