name: CI

on:
  pull_request:
  push:
    branches:
      - master
      - main
      - develop
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  checks: write

jobs:
  mc-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup Rust
        uses: ./.github/actions/setup-rust
      - name: List packages to test
        run: |
          cargo test -p 2>&1 | \
            awk '/mc-/ { print "-p " $1 }' | \
            grep -v -e mc-fog -e mc-consensus | \
            tee /tmp/mc-test-packages
      - name: Run tests
        uses: ./.github/actions/run-mc-tests
        with:
          args: $(cat /tmp/mc-test-packages)
          junit_xml_filename: junit-mc-tests.xml


  consensus-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup Rust
        uses: ./.github/actions/setup-rust
      - name: List packages to test
        run: |
          cargo test -p 2>&1 | \
            awk '/mc-consensus/ { print "-p " $1 }' | \
            tee /tmp/mc-test-packages
      - name: Run tests
        uses: ./.github/actions/run-mc-tests
        with:
          args: $(cat /tmp/mc-test-packages)
          junit_xml_filename: junit-consensus-tests.xml


  fog-tests:
    runs-on: ubuntu-latest
    env:
      # TEST_DATABASE_URL points at the server, as Fog recovery DB tests create
      # and drop PG databases as needed.
      TEST_DATABASE_URL: postgres://postgres:postgres@postgres

    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup Rust
        uses: ./.github/actions/setup-rust
      - name: List packages to test
        run: |
          cargo test -p 2>&1 | \
            awk '/mc-fog/ { print "-p " $1 }' | \
            grep -v mc-fog-ingest | \
            tee /tmp/mc-test-packages
      - name: Run tests
        uses: ./.github/actions/run-mc-tests
        with:
          args: $(cat /tmp/mc-test-packages) --build-jobs 4
          junit_xml_filename: junit-fog-tests.xml

    services:
      # Spin up a PostgreSQL server
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5


  fog-ingest-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup Rust
        uses: ./.github/actions/setup-rust
      - name: Run tests
        uses: ./.github/actions/run-mc-tests
        with:
          # These tests time out without release mode.
          args: -p 'mc-fog-ingest-*' --release
          junit_xml_filename: junit-fog-ingest-tests.xml
    env:
      # TEST_DATABASE_URL points at the server, as Fog recovery DB tests create
      # and drop PG databases as needed.
      TEST_DATABASE_URL: postgres://postgres:postgres@postgres

    services:
      # Spin up a PostgreSQL server
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5


  fog-conformance-tests:
    runs-on: ubuntu-latest

    env:
      # DATABASE_URL points to a specific database.
      DATABASE_URL: postgres://postgres:postgres@postgres/fog_local
      # Set env vars so PG tools like createdb and dropdb do the right thing.
      PGHOST: postgres
      PGUSER: postgres
      PGPASSWORD: postgres

    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          # FIXME: This fails with Python 3.10: "AttributeError: module
          # 'importlib' has no attribute 'abc'. Did you mean: '_abc'?"
          python-version: '3.9'
      - name: Setup Rust
        uses: ./.github/actions/setup-rust
      - name: Set up environment
        working-directory: tools/fog-local-network
        run: |
          python3 -m venv env
          . ./env/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          ./build.sh

          # Install nginx and PG client bins, used by fog_conformance_tests.py
          apt-get update
          apt-get install -y postgresql-client nginx
      - name: fog_conformance_tests.py
        working-directory: tools/fog-local-network
        run: |
          . ./env/bin/activate
          python3 fog_conformance_tests.py --release
      - name: Upload core dumps
        uses: ./.github/actions/upload-core-dumps
      - name: Check dirty git
        uses: ./.github/actions/check-dirty-git
      - name: Upload logs
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: fog_conformance_tmp_fog
          path: /tmp/fog*
          if-no-files-found: ignore

    services:
      # Spin up a PostgreSQL server
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5


  fog-local-network-tests:
    runs-on: ubuntu-latest

    env:
      # DATABASE_URL points to a specific database.
      DATABASE_URL: postgres://postgres:postgres@postgres/fog_local
      # Set env vars so PG tools like createdb and dropdb do the right thing.
      PGHOST: postgres
      PGUSER: postgres
      PGPASSWORD: postgres

    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3'
      - name: Setup Rust
        uses: ./.github/actions/setup-rust
      - name: Build and generate sample data
        run: |
          # Generate enclave signing key
          openssl genrsa -out Enclave_private.pem -3 3072
          export CONSENSUS_ENCLAVE_PRIVKEY="$PWD/Enclave_private.pem"
          export INGEST_ENCLAVE_PRIVKEY="$PWD/Enclave_private.pem"
          export LEDGER_ENCLAVE_PRIVKEY="$PWD/Enclave_private.pem"
          export VIEW_ENCLAVE_PRIVKEY="$PWD/Enclave_private.pem"
          export MC_LOG=debug

          # Build binaries
          cargo build \
              -p mc-admin-http-gateway \
              -p mc-consensus-mint-client \
              -p mc-consensus-service \
              -p mc-crypto-x509-test-vectors \
              -p mc-fog-distribution \
              -p mc-fog-ingest-client \
              -p mc-fog-ingest-server \
              -p mc-fog-ledger-server \
              -p mc-fog-report-server \
              -p mc-fog-sql-recovery-db \
              -p mc-fog-test-client \
              -p mc-fog-view-server \
              -p mc-ledger-distribution \
              -p mc-mobilecoind \
              -p mc-util-generate-sample-ledger \
              -p mc-util-grpc-admin-tool \
              -p mc-util-keyfile \
              -p mc-util-seeded-ed25519-key-gen \
              --release

          BIN_DIR="$PWD/target/release"

          # Run in temp dir to appease check-dirty-git.
          mkdir -p /tmp/fog-local-network
          cd /tmp/fog-local-network

          # Generate sample keys and ledger.
          FOG_AUTHORITY_ROOT=$("$BIN_DIR/mc-crypto-x509-test-vectors" --type=chain --test-name=ok_rsa_head)
          "$BIN_DIR/sample-keys" --num 10 --seed=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
          "$BIN_DIR/generate-sample-ledger" --txs 100

          # Generate sample Fog keys.
          "$BIN_DIR/sample-keys" --num 4 --output-dir fog_keys --fog-report-url 'insecure-fog://localhost:6200' --fog-authority-root $FOG_AUTHORITY_ROOT

          # Install nginx and PG client bins, used by fog_local_network.py
          apt-get update
          apt-get install -y postgresql-client nginx
      - name: Run local network
        run: |
          BIN_DIR="$PWD/target/release"
          SCRIPT_DIR="$PWD/tools/fog-local-network"

          cd /tmp/fog-local-network

          # Run local network in background.
          MC_LOG="debug,rustls=warn,hyper=warn,tokio_reactor=warn,mio=warn,want=warn,rusoto_core=error,h2=error,reqwest=error,rocket=error,<unknown>=error" \
          LEDGER_BASE="$PWD/ledger" \
          python3 "$SCRIPT_DIR/fog_local_network.py" --network-type dense5 --skip-build &
          # Give it time to spin up
          sleep 20

          # Run fog-distribution client to exercise Fog
          "$BIN_DIR/fog-distribution" \
              --sample-data-dir . \
              --max-threads 1 \
              --peer insecure-mc://localhost:3200/ \
              --peer insecure-mc://localhost:3201/ \
              --peer insecure-mc://localhost:3202/ \
              --peer insecure-mc://localhost:3203/ \
              --peer insecure-mc://localhost:3204/ \
              --num-tx-to-send 10
          # Give it time to spin up
          sleep 20

          # Run test-client
          "$BIN_DIR/test_client" \
              --consensus insecure-mc://localhost:3200/ \
              --consensus insecure-mc://localhost:3201/ \
              --consensus insecure-mc://localhost:3202/ \
              --consensus insecure-mc://localhost:3203/ \
              --consensus insecure-mc://localhost:3204/ \
              --num-clients 4 \
              --num-transactions 200 \
              --consensus-wait 300 \
              --transfer-amount 20 \
              --fog-view insecure-fog-view://localhost:8200 \
              --fog-ledger insecure-fog-ledger://localhost:8200 \
              --key-dir "$PWD/fog_keys"

      - name: Upload core dumps
        uses: ./.github/actions/upload-core-dumps
      - name: Check dirty git
        uses: ./.github/actions/check-dirty-git
      - name: Upload logs
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: local_network_tmp_fog
          path: /tmp/fog*
          if-no-files-found: ignore

    services:
      # Spin up a PostgreSQL server
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5


  publish-test-results:
    runs-on: ubuntu-latest
    if: success() || failure()
    needs:
      - mc-tests
      - consensus-tests
      - fog-tests
      - fog-ingest-tests
    steps:
    - name: Download XML reports
      if: success() || failure()
      uses: actions/download-artifact@v3
      with:
        name: junit-xml
    - name: Publish Test Report
      if: success() || failure()
      uses: mikepenz/action-junit-report@v3
      with:
        check_name: Test Report
        report_paths: '**/*.xml'

# via https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-only-cancel-in-progress-jobs-or-runs-for-the-current-workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
