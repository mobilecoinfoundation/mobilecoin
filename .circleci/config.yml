# vim: tabstop=2 softtabstop=2 shiftwidth=2 expandtab:

# Notes:
# * The new resolver has a bug that causes packages to select features non-deterministically under
#   certain circumstances. To work around this, `--target` must be specified when using cargo. This
#   can be removed once the bug is fixed. Similarly, `--tests` must be specified when using
#   `cargo test` so that non-test profile builds don't bleed over.
#   See: [MC-1731] and https://github.com/rust-lang/cargo/issues/8549

version: 2.1

defaults:
  builder-install: &builder-install gcr.io/mobilenode-211420/builder-install:1_12
  default-xcode-version: &default-xcode-version "12.0.0"

  default-environment: &default-environment
    # sccache config
    SCCACHE_IDLE_TIMEOUT: "1200"
    SCCACHE_CACHE_SIZE: 1G
    SCCACHE_ERROR_LOG: /tmp/sccache.log

  default-build-environment: &default-build-environment
    <<: *default-environment
    IAS_MODE: DEV
    SGX_MODE: SW
    RUST_BACKTRACE: "1"
    SKIP_SLOW_TESTS: "1"

executors:
  build-executor:
    docker:
      - image: *builder-install
    resource_class: xlarge

  test-executor:
    docker:
      - image: *builder-install
    resource_class: large

  macos:
    parameters:
      xcode-version:
        type: string
        default: *default-xcode-version
    macos:
      xcode: << parameters.xcode-version >>
    environment:
      HOMEBREW_NO_AUTO_UPDATE: "1"
      HOMEBREW_NO_INSTALL_CLEANUP: "1"
      HOMEBREW_BUNDLE_NO_LOCK: "1"

commands:
  print_versions:
    description: Version Info
    steps:
      - run:
          name: Version Info
          command: |
            rustc --version
            cargo --version
            rustup --version
            sccache --version
            command -v jq >/dev/null && jq --version || true

  env_setup:
    description: Environment Setup
    steps:
      - run:
          name: Configure Cargo to use git cli
          command: |
            mkdir -p ~/.cargo
            echo '[net]' >> ~/.cargo/config
            echo 'git-fetch-with-cli = true' >> ~/.cargo/config

            if [ -f ~/.gitconfig ]; then
              sed -i -e 's/github/git-non-exist-hub/g' ~/.gitconfig # https://github.com/rust-lang/cargo/issues/3900
            fi
      - run:
          name: Set utility environment variables
          command: |
            echo "export HOST_TARGET_TRIPLE=\"$(rustc -Vv | sed -n 's/^host: //p')\"" >> $BASH_ENV

  enable_sccache:
    description: Enabling sccache
    steps:
      - run:
          name: Enable sccache
          command: |
            echo 'export RUSTC_WRAPPER=sccache' >> $BASH_ENV
            echo 'export CMAKE_C_COMPILER_LAUNCHER=sccache' >> $BASH_ENV
            echo 'export CMAKE_CXX_COMPILER_LAUNCHER=sccache' >> $BASH_ENV

            # Sccache doesn't support incremental building
            echo 'export CARGO_INCREMENTAL=0' >> $BASH_ENV

            # Set cache dir explicitly so that all platforms use the same location
            echo 'export SCCACHE_DIR=$HOME/.cache/sccache' >> $BASH_ENV

  restore-sccache-cache:
    steps:
      - restore_cache:
          name: Restore sccache cache
          key: v0-sccache-{{ arch }}-{{ .Environment.CIRCLE_JOB }}.

  save-sccache-cache:
    steps:
      - save_cache:
          name: Save sccache cache
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: v0-sccache-{{ arch }}-{{ .Environment.CIRCLE_JOB }}.{{ .Revision }}
          paths:
            - ~/.cache/sccache

  record-sccache-cache-stats:
    steps:
      - run:
          name: Print sccache statistics
          command: sccache --show-stats
      - store_artifacts:
          path: /tmp/sccache.log
          destination: logs/sccache.log

  restore-cargo-cache:
    steps:
      - restore_cache:
          name: Restore Cargo cache
          key: v0-cargo-{{ arch }}

  save-cargo-cache:
    steps:
      - run:
          name: Prepare Cargo cache for saving
          command: |
            set -x

            command -v cargo-install-update >/dev/null || cargo install cargo-update
            command -v cargo-trim >/dev/null || cargo install cargo-trim

            cargo install-update --all

            # Configure cargo-trim with the project's Cargo.lock files
            mkdir -p ~/.config
            cargo trim --directory "$(pwd)"
            cargo trim --directory "$(pwd)/consensus/enclave/trusted"

            # Clean dependencies not in the Cargo.lock
            time cargo trim --orphan-clean

            # Make sure all dependencies are downloaded, since there appears to be
            # a bug where cargo trim erroneously removes certain git repos.
            time cargo fetch --locked
            (cd consensus/enclave/trusted && time cargo fetch --locked)

            # Remove the registry src dir since it's the largest dir and it's
            # recreatable from the archives in ~/.cargo/cache
            time cargo trim --wipe src

            # Run git compress on cached repos
            time cargo trim --gc all

            # Display Cargo cache stats
            cargo trim --query

            # Uninstall binary cargo crates that don't need to be cached
            time cargo uninstall cargo-trim cargo-update
      - save_cache:
          name: Save Cargo cache
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: v0-cargo-{{ arch }}-{{ .Revision }}
          # https://doc.rust-lang.org/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci
          paths:
            - ~/.cargo/.crates.toml
            - ~/.cargo/bin
            - ~/.cargo/git/checkout
            - ~/.cargo/git/db
            - ~/.cargo/registry/cache
            - ~/.cargo/registry/index
      - record-cargo-cache-stats

  record-cargo-cache-stats:
    steps:
      - run:
          name: Print Cargo cache statistics
          command: |
            cargo cache
            cargo cache local

  restore-homebrew-cache:
    steps:
      - restore_cache:
          name: Restore Homebrew cache
          key: v0-homebrew-{{ arch }}
      - when:
          condition: { equal: [ << pipeline.git.branch >>, master ] }
          steps:
            - run:
                name: Update Homebrew
                command: |
                  brew --version
                  brew update --preinstall
      - run:
          name: Install Homebrew dependencies
          command: |
            brew --version
            brew bundle --no-upgrade

  save-homebrew-cache:
    steps:
      - run:
          name: Prepare Homebrew cache for saving
          command: |
            # Make sure latest versions are installed
            time brew bundle

            # Remove all dependencies except those in the Brewfile
            time brew bundle cleanup --force

            brew info
      - save_cache:
          name: Save Homebrew cache
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: v0-homebrew-{{ arch }}-{{ .Revision }}
          paths:
            - /usr/local/Cellar

  install-rust:
    steps:
      - run:
          name: Install Rust
          command: |
            command -v rustup >/dev/null || \
              curl https://sh.rustup.rs --tlsv1.2 -sSf | sh -s -- -y --default-toolchain none
            # Installs the toolchain specified in `rust-toolchain`
            "$HOME/.cargo/bin/rustup" show active-toolchain

  install-ci-deps:
    steps:
      - run:
          name: Install CI dependencies
          command: |
            command -v sccache >/dev/null || cargo install sccache
            command -v cargo-cache >/dev/null || cargo install cargo-cache
            command -v cargo2junit >/dev/null || cargo install cargo2junit

  prefetch-cargo-deps:
    steps:
      - run:
          name: Fetch project Cargo dependencies
          command: |
            set -x
            time cargo fetch --locked
            (cd consensus/enclave/trusted && time cargo fetch --locked)

  prepare-for-build:
    parameters:
      os:
        type: enum
        enum: ["linux", "macos", "windows"]
        default: linux
    steps:
      - checkout
      - when:
          condition: { equal: [ << parameters.os >>, macos ] }
          steps: [ restore-homebrew-cache ]
      - install-rust
      - restore-cargo-cache
      - install-ci-deps
      - env_setup
      - print_versions
      - enable_sccache
      # Cache is only saved when building from master. We don't restore sccache on
      # master so that the cache is clean when saved.
      - unless:
          condition: { equal: [ << pipeline.git.branch >>, master ] }
          steps: [ restore-sccache-cache ]
      - prefetch-cargo-deps

  run-tests:
    parameters:
      test_command:
        type: string
        default: cargo test --frozen --target "$HOST_TARGET_TRIPLE" --no-fail-fast --tests
    steps:
      - run:
          name: Run tests
          command: |
            mkdir -p /tmp/test-results

            # Run tests, then convert the cargo json results into junit xml format.
            #
            # Note: Using curly braces ensures that the conversion is run even if the tests fail,
            # while still allowing the exit code from the tests to be propagated. Using `tee` to
            # pipe the output to a file before converting ensures that the tests are not
            # interrupted if conversion fails. `|| true` is added so that the test as a whole does
            # not fail even if conversion fails. This is especially necessary because the
            # conversion tool must parse all test output, including log output, in order to parse
            # the test results, and unfortunately Cargo does not always output the test results in
            # such a way that is cleanly parsable.
            << parameters.test_command >> -- \
                -Zunstable-options --format json --report-time \
              | {
                  tee /tmp/test-results/output.log
                  cat /tmp/test-results/output.log \
                    | cargo2junit > /tmp/test-results/results.xml \
                    || true
                }

  post-build:
    steps:
      - record-sccache-cache-stats

  post-test:
    steps:
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

  lint:
    steps:
      - run:
          name: Lint/fmt
          command: |
            ./tools/lint.sh

  generate-docs:
    steps:
      - run:
          name: Generating docs...
          command: |
            cargo doc --no-deps
            tar -C target -czvf /tmp/doc.tgz doc/

  store-docs:
    steps:
      - store_artifacts:
          path: /tmp/doc.tgz

  check-dirty-git:
    steps:
      - run:
          name: Checking dirty git
          command: |
            if [[ -n $(git status --porcelain) ]]; then
              echo "repo is dirty"
              git status
              exit 1
            fi

jobs:
  # A job that builds all the tests in the workspace, and stores them in a test-bins/ directory.
  # This directory then gets uploaded to the CircleCI workflow's workspace to be consumed
  # by the run-parallel-tests jobs
  build-parallel-tests:
    executor: build-executor
    environment:
      <<: *default-build-environment
    steps:
      - prepare-for-build
      - run:
          name: Build/prepare unit tests
          command: |
            # Get a list of package names to test and the binaries that need to be executed in order to run them.
            # It's possible for a package to produce multiple test binaries. This also compiles the tests.
            rm -rf test-bins && mkdir test-bins && mkdir test-bins/bins-per-pkg

            echo "Discovering tests..."
            cargo test --frozen --no-run --message-format=json | jq -r "select(.profile.test == true) | (.package_id | split(\" \")[0]) + \" \" + .filenames[]" | sort | uniq | tee test-list

            while read line; do
              PKG=$(echo $line | cut -f 1 -d ' ')
              TEST_BIN=$(echo $line | cut -f 2 -d ' ')
              echo "Discovered package $PKG with binary $TEST_BIN"
              echo $PKG >> test-bins/all-pkgs.txt.unsorted
              echo $TEST_BIN >> test-bins/bins-per-pkg/$PKG
            done < test-list

            # De-dupe packages in all-pkgs.txt
            cat test-bins/all-pkgs.txt.unsorted | sort | uniq > test-bins/all-pkgs.txt

            # Collect all test bins into test-bins/
            for PKG in $(cat test-bins/all-pkgs.txt); do
              for TEST_BIN in $(cat test-bins/bins-per-pkg/$PKG); do
                cp $TEST_BIN test-bins
              done
            done

            # Some logging
            echo 'inside test-bins/:'
            ls -lRa test-bins
            echo "inside all-pkgs.txt:"
            cat test-bins/all-pkgs.txt

      - lint

      - check-dirty-git

      # Save the test binaries and helper text files into the workspace so that they could be consumed by the `run-tests` job.
      - persist_to_workspace:
          root: test-bins
          paths:
            - .
      - save-cargo-cache
      - save-sccache-cache
      - post-build

  # Runs tests from a test-bin directory previously generated by the build-tests job
  run-parallel-tests:
    executor: test-executor
    parallelism: 2
    environment:
      <<: *default-build-environment
    steps:
      - restore-cargo-cache
      - env_setup
      - attach_workspace:
          at: test-bins

      - run:
          name: Run unit tests
          command: |
            ls -lRa test-bins

            # Crates that define macros (e.g. `digestible_derive`) link dynamically against libtest*.so, which sits here.
            export LD_LIBRARY_PATH="$HOME/.rustup/toolchains/$(rustup show active-toolchain | awk '{print $1}')/lib"
            echo "LD_LIBRARY_PATH = $LD_LIBRARY_PATH"

            # Run the test binaries for all the packages we're assigned by CircleCI's test splitting mechanism,
            rm -rf test-results && mkdir test-results
            echo "About to run: $(cat test-bins/all-pkgs.txt | circleci tests split --split-by=timings --timings-type=classname | sort | uniq)"
            for PKG in $(cat test-bins/all-pkgs.txt | circleci tests split --split-by=timings --timings-type=classname); do
              echo "Running tests for $PKG"
              for TEST_BIN in $(cat test-bins/bins-per-pkg/$PKG); do
                echo "Running bin $TEST_BIN for pkg $PKG..."
                JSON_OUT="results-$PKG.json"
                # Run the test and also store the output into a JSON file
                ./test-bins/$(basename $TEST_BIN) -Z unstable-options --report-time --format json | tee $JSON_OUT

                # For CircleCI's time-based splitting to work, we need to convert Cargo's JSON output into a JUNIT xml file.
                # Sadly, cargo does not output the name of the package it is testing. This search-and-replace is a hack around that.
                cat $JSON_OUT | cargo2junit | sed -e 's/name="\(.*\)" package/name="'"$PKG"'" package/' > test-results/$(basename $TEST_BIN).xml
              done
            done

      - check-dirty-git

      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results


  # Run tests on a single container
  run-tests:
    executor: build-executor
    parallelism: 1
    environment:
      <<: *default-build-environment
    steps:
      - prepare-for-build
      - run-tests
      - check-dirty-git
      - when:
          condition: { equal: [ << pipeline.git.branch >>, master ] }
          steps: [ save-sccache-cache ]
      - post-build
      - post-test

  # Build and lint in debug mode
  build-and-lint-debug:
    executor: build-executor
    environment:
      <<: *default-build-environment
    steps:
      - prepare-for-build
      - run:
          name: Cargo check (SW/IAS dev)
          command: cargo check --frozen --target "$HOST_TARGET_TRIPLE"
      - check-dirty-git
      - run:
          name: Cargo check (HW/IAS prod)
          environment:
            SGX_MODE: HW
            IAS_MODE: PROD
          command: cargo check --frozen --target "$HOST_TARGET_TRIPLE"

      # The lint and saving of caches happens here since this job is faster than the run-tests job.
      # This results in shorter CI times.
      - lint
      - generate-docs
      - store-docs
      - check-dirty-git
      - when:
          condition: { equal: [ << pipeline.git.branch >>, master ] }
          steps: [ save-cargo-cache, save-sccache-cache ]
      - post-build

  # Build using macOS
  build-macos:
    parameters:
      xcode-version:
        type: string
        default: *default-xcode-version
    executor:
      name: macos
      xcode-version: << parameters.xcode-version >>
    environment:
      <<: *default-build-environment
      SCCACHE_CACHE_SIZE: 450M
      RUSTFLAGS: -D warnings -C target-cpu=penryn
      CONSENSUS_ENCLAVE_CSS: /Users/distiller/project/sgx/css/src/valid.css
    steps:
      - prepare-for-build:
          os: macos
      - run:
          name: Cargo check
          command: |
            cargo check --frozen --target "$HOST_TARGET_TRIPLE" --workspace \
              --exclude mc-attest-untrusted \
              --exclude mc-consensus-enclave \
              --exclude mc-consensus-service \
              --exclude mc-sgx-core-types \
              --exclude mc-sgx-core-types-sys \
              --exclude mc-sgx-epid \
              --exclude mc-sgx-epid-sys \
              --exclude mc-sgx-epid-types \
              --exclude mc-sgx-epid-types-sys \
              --exclude mc-sgx-ias-types \
              --exclude mc-sgx-report-cache-untrusted \
              --exclude mc-sgx-urts-sys
      - run:
          name: Cargo check mobilecoind/testnet-client
          command: |
            cargo check --frozen --target "$HOST_TARGET_TRIPLE" \
              -p mc-mobilecoind --bin mobilecoind \
              -p mc-testnet-client --bin mc-testnet-client
      - check-dirty-git
      - when:
          condition: { equal: [ << pipeline.git.branch >>, master ] }
          steps: [ save-cargo-cache, save-sccache-cache ]
      - post-build
      - when:
          condition: { equal: [ << pipeline.git.branch >>, master ] }
          steps: [ save-homebrew-cache ]

workflows:
  version: 2
  # Build and run tests on a single container
  build-and-run-tests:
    jobs:
      # Build and run tests in parallel - not needed at the moment since the test suite is fast enough.
      # - build-parallel-tests
      # - run-parallel-tests:
      #     requires:
      #       - build-parallel-tests

      # Run tests on a single container
      - run-tests

      # Build everything in debug
      - build-and-lint-debug

      # Build using macOS
      - build-macos:
          name: build-macos-xcode-<< matrix.xcode-version >>
          matrix:
            parameters:
              xcode-version: ["11.7.0", *default-xcode-version]
